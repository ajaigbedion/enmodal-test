{"version":3,"sources":["enmodal/main.js","enmodal/bezier.js","enmodal/data-layers.js","enmodal/components.js","enmodal/draw.js","enmodal/image.js","enmodal/interface.js","enmodal/markers.js","enmodal/session.js","enmodal/settings.js","enmodal/sharing.js","enmodal/sidebar.js","enmodal/station-pair.js","enmodal/transit.js","enmodal/utils.js"],"names":["handle_map_click","e","enmodal","transit_interface","active_line","active_tool","pp","pin_projection","latlng","lat","lng","get_station_pair_by_sp_id","add_pin","x","y","add_new_station","L","popup","setLatLng","setContent","openOn","leaflet_map","preview_clear","set_basemap_style","basemap","_leaflet_map","removeLayer","esri","basemapLayer","addLayer","basemap_options","DarkGray","opacity","background_color","Gray","Imagery","Oceans","options","$","css","getPane","style","set_basemap_labels","s","basemapLabels","init_leaflet_map","map","fullscreenControl","attributionControl","setView","START_ZOOM","on","init_document","document","delete_station_event","transfer_station_event","build_to_station_event","line_id","parseInt","this","attr","station_id","remove_line_from_station","has","length","text","sn","appendTo","val","select","blur","newText","parent","html","find","remove","replace","station","active_service","get_station_by_id","name","sidebar","update_line_diagram","sync_station_info","get_station_marker_by_station","update_tooltip","keyup","keyCode","line_select_click_handler","transit_map","station_marker","generate_popup","marker","openPopup","panTo","getLatLng","update_line_editor","line_editor_save","click","line_selector_new","update_line_selector","currentTarget","getAttribute","service_editor_save","service_selector_new","SERVICE_MODES_ENABLED","mode","update_service_selector","sid","hide","show","autocomplete","source","request","response","is_latlng","term","ll","get_latlng","latLng","ajax","url","dataType","success","data","features","item","properties","country_a","label","locality","region_a","value","geometry","event","ui","coordinates","minLength","spectrum","color","DEFAULT_LINE_BG","showInput","className","showInitial","maxSelectionSize","preferredFormat","change","DEFAULT_LINE_FG","refresh_line_editor","layers","preview","clearLayers","hasClass","active","removeClass","addClass","hide_layers","draw_layer_population","draw_layer_employment","draw_layer_ridership","session_save","trim","params","param","i","session_id","async","status","map_name","keydown","console","log","which","ctrlKey","redo","undo","Clipboard","_id_factory","_undo_buffer","_undo_index","IdFactory","public_key","get_url_parameter","Sidebar","sharing","Sharing","Map","TransitUI","DataLayers","id_factory","update","session_load","window","location","pathname","session_new","push_undo_buffer","Pin","[object Object]","id","line_paths","SplineSegment","controls","centers","LineSplineSegment","line","spline_segments","reverse","BezierControlPoint","BezierCenter","hexagon_bounds","hexagon_zoom","force","get_hexagons","ridership","min_ridership","max_ridership","stations","r","circleMarker","radius","empty","append","toString","Math","round","geojson","num_breaks","feature_name","property_array","push","sort","sortNumber","breaks","index","j","d","scale","hex","initial_bounds","getBounds","bounds","pad","do_it","contains","getZoom","MIN_ZOOM","data_layer_request_num","lat_min","getSouth","lat_max","getNorth","lng_min","getWest","lng_max","getEast","ASYNC_REQUIRED","data_zip","JSON","parse","quantiles","HEXAGON_SCALES","DGGRID_AREA","HEXAGON_UNITS","vectorGrid","slicer","vectorTileLayerStyles","sliced","zoom","property","population","employment","fillColor","population_color","fill","weight","fillOpacity","geoJson","feature","bringToFront","setMinZoom","Vue","component","template","props","visible","type","Boolean","default","dataTargetProp","dataTargetValue","methods","collapsed","reset","exportPdf","app","modal","save_pdf","exportJson","save_json","setBasemap","basemapStyle","setLabels","STATUS_INITIAL","STATUS_SAVING","STATUS_ANALYZING","STATUS_SUCCESS","STATUS_FAILED","STATUS_IMPORTING","uploadFieldName","fileCount","computed","isInitial","upload_status","isSaving","isAnalyzing","isSuccess","isFailed","isImporting","gtfsImportMap","uploadedFiles","uploadError","upload","formData","onSuccess","onError","cache","contentType","processData","method","save","concat","err","filesChange","fieldName","fileList","FormData","Array","from","keys","toggleAgency","agency","agencyState","prop","selectAll","selectNone","start","services","lines","each","route","indexOf","stringify","handle_map_data","json_import_status","jsonImportMap","file","reader","FileReader","onload","target","result","jdata","settings","readAsText","el","LinePath","raw_edge_paths","edge_paths","edge","edge_id","EdgePath","stop_points","control_points","offset","custom_control_points","track_width","TRACK_WIDTH","path","generate_path","polyline","bezier_options","new_options","apply","curve_options","smoothFactor","clickable","pointer-events","curve","LineColor","g","b","fr","fg","fb","toUpperCase","slice","Hexagon","geo","generate_style","poly","generate_poly","geoJSON","stroke","setStyle","NS_interface","data_layer","OUTPUT_WIDTH_PX","OUTPUT_HEIGHT_PX","OUTPUT_DPI","OUTPUT_WIDTH_PT","OUTPUT_HEIGHT_PT","save_svg","canvas","callback","draw","SVG","size","svg_overlay","svg_markers","svg","btoa","canvgv2","getElementById","toDataURL","ctx","getContext","image","Image","pixel_bounds","getPixelBounds","pixel_origin","getPixelOrigin","placement_x","min","placement_y","drawImage","src","create_image","getCenter","invalidateSize","geographic_bounds","fitBounds","setTimeout","leafletImage","fillStyle","fillRect","font","fillText","textAlign","save_image","clearRect","width","height","pdf","jsPDF","orientation","unit","format","addImage","station_markers","station_pairs","preview_paths","preview_paths_enabled","nearest_station_to_mouse","station_for_bezier_edits","moving_station_marker","station_to_merge","dragging_pin","station_pair_id_move_count_map","preview_line_pin_marker","active_transfer_station","pane_station_markers","createPane","featureGroup","transfers","pane","inactive","hexagons","chroma_scale","chroma","dragging","enable","removeEventListener","preview_handler","merge_stations","update_station_info","station_lines","get_station_pairs_for_line","undraw_paths","paths","street_path_is_valid","draw_line","purge_bad_transfers","draw_active_layer","purge_station_pairs","layer","service","draw_service","clear","create_station_marker","stop","temp_length","best_edges","edges_to_remove","best_line_distance","base_length","stops","existing_stops","temp_edge_1","Edge","temp_edge_2","temp_edge_to_remove","k","edges","compare_stops","temp_edge","LineDelta","has_station","sp_lines","open_popup","StationMarker","closeTooltip","off","disable","circleStartingLat","circleStartingLng","_latlng","mouseStartingLat","mouseStartingLng","mouseNewLat","mouseNewLng","center","closePopup","move_to","lines_for_station_by_station_pair","station_pairs_to_draw","draw_transfers","ALLOW_STATION_MERGING","mergeable","m_px","latLngToLayerPoint","station_is_end_of_line","s_px","distanceTo","STATION_MERGE_THRESHOLD","show_merge","clear_merge","station_marker_found","addTo","Station","Stop","add_station","add_stop","l","lines_to_draw","delta","get_insertion_result","add","add_edge","get_station_pairs","sp_line_lss","line_spline_segments","lss_line","affected_station","remove_edge","INC_UPDATES","service_id","check_server_error","neighborhood","region","stop_id","stop_1_id","stop_2_id","get_ridership","edges_removed","remove_self_edges","remove_duplicate_edges","station_to_remove","station_to_keep","stop_to_remove","stop_to_keep","new_edge","clean_edges","remove_station","ASYNC_OPTIONAL","force_closure","m","n","impacted_lines","impacted_stops","splice","impacted_edges","has_stop","sp_line","central_edge","floor","random","central_stop","spoke_stop","path_between_stops","is_orphan","NS_id","remove_transfers_for_station","station_pair","undraw","get_line_by_id","get_stops_by_station","remove_stop","num_colors","num_unique_colors","set_radius","max","station_1","station_2","sp_id","station_drawmap","branch","has_station_pair","get_station_pair","mm","render","spr","station_pair_polarity","line_path","has_line","clear_spline_segment_for_line","generate_paths","branch_coordinates","station_id_to_branch_coordinates","coordinate_index","pins_to_push","pins","spline","BezierSpline","points","sharpness","BEZIER_SHARPNESS","duration","StationPair","bci","bci_end","sss","ss","lss","add_line_spline_segment","update_station_markers","draw_pins","draw_transfer","transfer","TRANSFER_WIDTH","station_distance","MAX_TRANSFER_DISTANCE_MILES","dashArray","TRANSFER_PREVIEW_OPACITY","transfer_layer","remove_transfers_above_length","has_edge_for_stations","undraw_pins","edge_path","regenerate_path","p","p_px","best_p","best_distance","best_station_pair","best_sid","sids_for_showing_pins","project_pin","PIN_DISTANCE_TO_SHOW_PINS","DEBUG_PIN_PROJECTIONS","show_pin_icon","PIN_DISTANCE_MIN","nearest_pin_distance","distance_to_nearest_pin","PIN_DISTANCE_FROM_EXISTING_PIN_MIN","best_station","distance","PIN_DISTANCE_FROM_STATION_MIN","icon","PIN_ICON","color_bg","station_loc","mouse_loc","station_mouse_line","chunk","turf","lineChunk","preview_line","preview_transfer","polyline_latlngs","markers","bezier_layer","cutoff","locus","use_locus","dir","best_pair_markers","a","UNDO_BUFFER_SIZE","map_json","to_json","error","reload","add_stop_to_station","tooltip_options","direction","point","generate_marker","merge_pending","bindPopup","MARKER_RADIUS_DEFAULT","INACTIVE_OPACITY","draggable","zIndexOffset","setRadius","bindTooltip","unbindPopup","get_station_marker_by_marker","transfer_loc","add_transfer","MARKER_MERGE_DELTA","content","active_line_is_different","color_fg","setTooltipContent","private_key","history","pushState","Service","add_service","refresh_service_editor","from_json","primary_service","user_settings","sp","station_ids","sp_real","undefined","title","LZString","compressToBase64","session_json","removeAttr","message","ret","GAME_VERSION","CURVE_THRESHOLD","MARKER_RADIUS_LARGE","MARKER_RADIUS_HUGE","STATION_MARKER_LARGE_THRESHOLD","STATION_MARKER_HUGE_THRESHOLD","STATION_MARKER_SCALE_THRESHOLD","TRACK_OFFSET","USE_CURVED_TRACKS","CURVE_OVERSHOOT","MAX_ZOOM","MIN_ZOOM_FOR_HEXAGONS","DEBUG_MODE","SHARED_STRETCH_THRESHOLD","TRANSFER_BUTTON_DEFAULT","TRANSFER_BUTTON_START","TRANSFER_BUTTON_END","RIDERSHIP_ADD","RIDERSHIP_NOCHANGE","RIDERSHIP_DELETE","CUSTOM_LINE_FIRST_INDEX","FOLLOW_STREET_MOVE_THRESH","BEZIER_LUT_STEPS","iconUrl","iconSize","iconAnchor","domain","DEBUG_BEZIER_CONTROLS","GTFS_ENABLED","origin","prepend","full_name","used_names","isNaN","charCodeAt","String","fromCharCode","Line","new_line_name","random_color","bg_hex","fg_hex","add_line","add_to_line_selector","line_name","substring","line_color_bg","line_color_fg","custom_line_name","custom_line_color_bg","custom_line_color_fg","issue","animate","scrollTop","active_stop","outer_stops","visited","stop_groups","branch_pos","dfs","v","neighbors","new_neighbor_count","w","stop_index","stop_position","branch_div","stop_group","start_index","connector_div","stop_div","stop_info_div","stop_connectors","connecting_lines","transfer_stations","transfer_station_lines","add_to_service_selector","clear_line_selector","get_service_by_id","custom_service_name","street_path","draw_counter","group_sss","used_lines","used_colors","average_sss","min_distance","Bezier","project","pin","px_n","px_p","self","increment_draw_counter","station_1_lat","station_1_lng","station_2_lat","station_2_lng","handle_server_error","draw_paths","new_distance","new_pt","steps","getLUT","dn","new_pin","generate_pin_marker","splice_point","draw_lines","pin_index","num_lines","lss_pos_color","num_lines_color","leaflet_id","_leaflet_id","get_pin_by_leaflet_id","remove_pin","toJSON","lat_min_set","lat_max_set","lng_min_set","lng_max_set","num_stations","latLngBounds","streets","parseFloat","group_id","edge_index","alt","best_length","center_stops","djikstra","dijkstra","sum_distance","inner_stops","outer_stop_index","inner_stop_index","stop_1","stop_2","dfs_stops","dfs_path_found","v_i","edge_c","stops_json","location_0","location_1","latlng_0","latlng_1","stop_ids","get_stop_by_id","Transfer","stops_1","stops_2","get_edge_by_stops","drawmaps","drawmap","station_repeat","start_stop","dfs_branch","visited_edge_sids","sv","current_branch_length","branch_count","choose_drawmap","branch_stop_start","branch_stop_end","br_visited","lines_to_check","Drawmap","line_to_check","stop_1_overlap","overlapping_stops","stop_2_overlap","stop_2_index","line_sid_to_shortest_drawmap_length","num_removed","t","current_id","return_id","vars","href","hash","key","s1","s2","test","c","split","json","blob","Blob","saveAs"],"mappings":"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","file":"enmodal.min.js","sourcesContent":["function handle_map_click(e) {\n    if (enmodal.transit_interface.active_line !== null && enmodal.transit_interface.active_tool == \"station\") {\n        var pp = enmodal.transit_interface.pin_projection(e.latlng.lat, e.latlng.lng);\n        if (!pp[0]) {\n            enmodal.transit_interface.add_new_station(e.latlng.lat, e.latlng.lng);\n        } else {\n            var sp = enmodal.transit_interface.get_station_pair_by_sp_id(pp[2]);\n            sp.add_pin(pp[1].x, pp[1].y);\n        }\n    }\n    if (enmodal.transit_interface.active_line === null && enmodal.transit_interface.active_tool == \"station\") {\n        L.popup().setLatLng(e.latlng).setContent(\"Create a line to start building\").openOn(enmodal.leaflet_map);\n    }\n    if (enmodal.transit_interface.active_tool == \"transfer\") {\n        enmodal.transit_interface.active_tool = \"station\";\n        enmodal.transit_interface.preview_clear();\n    }\n}\n\nfunction set_basemap_style(basemap) {\n    if (enmodal.transit_interface.basemap) {\n        _leaflet_map.removeLayer(enmodal.transit_interface.basemap);\n    }\n    enmodal.transit_interface.basemap = L.esri.basemapLayer(basemap);\n    _leaflet_map.addLayer(enmodal.transit_interface.basemap);\n\n    var basemap_options = {\n        'DarkGray': {\n            'opacity': 1.0,\n            'background_color': '#474749'\n        },\n        'Gray': {\n            'opacity': 1.0,\n            'background_color': '#e8e8e8'\n        },\n        'Imagery': {\n            'opacity': 0.4,\n            'background_color': '#474749'\n        },\n        'Oceans': {\n            'opacity': 1.0,\n            'background_color': '#f1eedd'\n        }\n    };\n\n    if (basemap in basemap_options) {\n        var options = basemap_options[basemap];\n        $(\"#map.leaflet-container\").css('background-color', options.background_color);\n        _leaflet_map.getPane('tilePane').style.opacity = options.opacity;\n    }\n}\n\nfunction set_basemap_labels(basemap, s) {\n\n    if (enmodal.transit_interface.basemapLabels) {\n        _leaflet_map.removeLayer(enmodal.transit_interface.basemapLabels);\n    }\n    if (s) {\n        enmodal.transit_interface.basemapLabels = L.esri.basemapLayer(basemap + 'Labels');\n        _leaflet_map.addLayer(enmodal.transit_interface.basemapLabels);\n    }\n}\n\nfunction init_leaflet_map() {\n    // Create leaflet map\n    var map = L.map('map', {\n        fullscreenControl: true,\n        attributionControl: false,\n    }).setView([40.713, -74.006], START_ZOOM);\n\n    /*L.tileLayer('http://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x}', {\n        attribution: '',\n        maxZoom: MAX_ZOOM,\n        minZoom: MIN_ZOOM\n    }).addTo(map);*/\n    \n    map.on('click', handle_map_click);\n\n    return map;\n}\n\nfunction init_document() {\n    \n    // Event handlers\n    $(document).on('click', '.station-delete', delete_station_event);\n    $(document).on('click', '.station-transfer', transfer_station_event);\n    $(document).on('click', '.station-build', build_to_station_event);\n    $(document).on('click', '.subway-deletable', function() {\n        var line_id = parseInt($(this).attr('transit-line-id'));\n        var station_id = parseInt($(this).attr('transit-station-id'));\n        enmodal.transit_interface.remove_line_from_station(station_id, line_id);\n    });\n    $(document).on('click', '.station-name', function() {\n        if ($(this).has(\"input\").length === 0) {\n            var text = $(this).text();\n            var sn = $(this);\n            $(this).text('');\n            $('<input type=\"text\" class=\"station-name-edit enm-editable\"></textarea>').appendTo($(this)).val(text).select().blur(\n\n            function() {\n                var newText = $(this).val();\n                $(this).parent().html(newText+'  <i class=\"fa fa-pencil\" style=\"margin-left: 5px;\" aria-hidden=\"true\"></i>').find('input').remove();\n                var station_id = sn.attr('id').replace('station-', '');\n                var station = enmodal.transit_interface.active_service.get_station_by_id(station_id);\n                station.name = newText;\n                enmodal.sidebar.update_line_diagram();\n                enmodal.transit_interface.sync_station_info(station);\n                enmodal.transit_interface.get_station_marker_by_station(station).update_tooltip();\n            }).keyup(function(e) {\n                if (e.keyCode == 13) {\n                    this.blur();\n                }\n            });\n        }\n    });\n    $(document).on('click', '.subway-clickable', function() {\n        line_select_click_handler($(this));\n        return false;\n    });\n    $(document).on('click', '.route-diagram-stop-info', function() {\n        var sn = $(this);\n        var station_id = sn.attr('id').replace('station-', '');\n        var station = enmodal.transit_map.get_station_by_id(station_id);\n        var station_marker = enmodal.transit_interface.get_station_marker_by_station(station);\n        station_marker.generate_popup();\n        station_marker.marker.openPopup();\n        enmodal.leaflet_map.panTo(station_marker.marker.getLatLng());\n    });\n    \n\n    /*setInterval(function(){\n        // Initialize service\n        $.ajax({ url: \"session-save\",\n            async: false,\n            dataType: 'json',\n            success: function(data, status) {\n            }\n        });\n    }, 10000);*/\n\n    $('#custom-line-name').keyup(function() {\n        enmodal.sidebar.update_line_editor();\n        enmodal.sidebar.line_editor_save();\n    });\n    $(\"#line-selector-new\").click(function() {\n        enmodal.sidebar.line_selector_new();\n    });\n\n    $(document).on(\"click\", \".line-selector-option\", function(e) {\n        enmodal.sidebar.update_line_selector(parseInt(e.currentTarget.getAttribute(\"transit-line-id\")));\n    });\n    \n    $('#custom-service-name').keyup(function() {\n        enmodal.sidebar.service_editor_save();\n    });\n    $(\"#service-selector-new\").click(function() {\n        enmodal.sidebar.service_selector_new();\n    });\n    \n    if (SERVICE_MODES_ENABLED) {\n        $(\".service-mode-button\").click(function() {\n            var sn = $(this);\n            var mode = sn.attr('transit-service-mode');\n            enmodal.transit_interface.active_service.mode = mode;\n            enmodal.sidebar.update_service_selector(enmodal.transit_interface.active_service.sid, true);\n        });\n    }\n\n    $(document).on(\"click\", \".service-selector-option\", function(e) {\n        enmodal.sidebar.update_service_selector(parseInt(e.currentTarget.getAttribute(\"transit-service-id\")), true);\n    });\n\n    // UI edits\n\n    $(\".subway-hidden\").hide();\n    //$(\"#custom-line-options\").hide();\n    $(\"#custom-lines\").hide();\n\n    // Starter screen\n    $(\"#game-start-scratch\").click(function() {\n        $(\"#starter-city-picker\").hide();\n        $(\"#starter\").hide();\n        $(\"#options\").show();\n    });\n\n    /*var input = document.getElementById('pac-input');\n    var autocomplete = new google.maps.places.Autocomplete(input, {types: [\"(cities)\"]});\n    autocomplete.addListener('place_changed', function() {\n        var place = autocomplete.getPlace();\n\n        CUSTOM_CITY_NAME = place.name;\n\n        var place_lat = place.geometry.location.lat();\n        var place_lng = place.geometry.location.lng();\n        enmodal.transit_interface.map.panTo(L.latLng(place_lat, place_lng));\n    });*/\n    $(\"#city-picker-input\").autocomplete({\n        source: function(request, response) {\n            if (is_latlng(request.term)) {\n                var ll = get_latlng(request.term);\n                enmodal.leaflet_map.panTo(L.latLng(ll[0],ll[1]));\n            } else {\n                $.ajax({\n                    url: \"http://search.mapzen.com/v1/autocomplete?api_key=mapzen-t6h4cff&layers=locality&text=\"+request.term,\n                    dataType: \"json\",\n                    success: function( data ) {\n                        response($.map(data.features, function(item) {\n                            if (item.properties.country_a == \"USA\") {\n                                return {\n                                    label : item.properties.locality + \", \" + item.properties.region_a,\n                                    value : item.geometry\n                                };\n                            }\n                        }));\n                    }\n                });\n            }\n        },\n        select: function (event, ui) {\n            $(\"#city-picker-input\").val(ui.item.label);\n            enmodal.transit_interface.map.panTo(L.latLng(ui.item.value.coordinates[1], ui.item.value.coordinates[0]));\n            return false;\n        },\n        minLength: 3\n    });\n    //$(\"#city-picker-input\").attr('autocomplete', 'on');\n\n    // Color pickers\n    $(\"#custom-line-options #color-picker-bg\").spectrum({\n        color: DEFAULT_LINE_BG,\n        showInput: true,\n        className: \"full-spectrum\",\n        showInitial: true,\n        maxSelectionSize: 10,\n        preferredFormat: \"hex\",\n        change: function(color) {\n            enmodal.sidebar.update_line_editor();\n            enmodal.sidebar.line_editor_save();\n        }\n    });\n    $(\"#custom-line-options #color-picker-fg\").spectrum({\n        color: DEFAULT_LINE_FG,\n        showInput: true,\n        className: \"full-spectrum\",\n        showInitial: true,\n        maxSelectionSize: 10,\n        preferredFormat: \"hex\",\n        change: function(color) {\n            enmodal.sidebar.update_line_editor();\n            enmodal.sidebar.line_editor_save();\n        }\n    });\n    if (enmodal.transit_interface.active_line !== null) enmodal.sidebar.refresh_line_editor();\n\n    // Tool selector\n\n    $(\"#tool-station\").click(function(e) {\n        if (enmodal.transit_interface.active_tool != \"station\") {\n            enmodal.transit_interface.layers.preview.clearLayers();\n            enmodal.transit_interface.active_tool = \"station\";\n        }\n    });\n    $(\"#tool-data\").click(function(e) {\n        if (enmodal.transit_interface.active_tool != \"data\") {\n            enmodal.transit_interface.layers.preview.clearLayers();\n            enmodal.transit_interface.active_tool = \"data\";\n        }\n    });\n    $(\".data-layer-selector\").click(function(e) {\n        if (!$(this).hasClass(\"data-layer-selected\")) {\n            $(\".data-layer-selector\").removeClass(\"data-layer-selected\");\n            $(this).addClass(\"data-layer-selected\");\n            if ($(this).attr('id') == \"data-layer-population\") {\n                enmodal.data.hide_layers();\n                enmodal.data.draw_layer_population(true);\n            }\n            if ($(this).attr('id') == \"data-layer-employment\") {\n                enmodal.data.hide_layers();\n                enmodal.data.draw_layer_employment(true);\n            }\n            if ($(this).attr('id') == \"data-layer-ridership\") {\n                enmodal.data.hide_layers();\n                enmodal.data.draw_layer_ridership();\n            }\n        } else {\n            enmodal.data.active = null;\n            $(\"#scale\").hide();\n            $(\".data-layer-selector\").removeClass(\"data-layer-selected\");\n            //enmodal.transit_interface.map.removeLayer(enmodal.transit_interface.data_layer);\n            enmodal.transit_interface.layers.data.clearLayers();\n        }\n    });\n\n    $(\"#tool-save\").click(function(e) {\n        session_save();\n    });\n\n    $(\"#tool-share\").click(function(e) {\n        $(\"#starter-share\").show();\n        $(\"#starter\").show();\n    });\n    \n    $(\"#share-ok\").click(function(e) {\n        $(\"#starter-share\").hide();\n        $(\"#starter\").hide();\n    });\n    \n    // Map name editor\n    $(document).on('click', '#map-title-inner', function() {\n        if ($(this).has(\"input\").length === 0) {\n            var text = $(this).text().trim();\n            var sn = $(this);\n            $(this).text('');\n            $('<input type=\"text\" class=\"map-title-edit enm-editable\"></input>').appendTo($(this)).val(text).select().blur(\n            function() {\n                var newText = $(this).val();\n                $(this).parent().html(newText + '  <i class=\"fa fa-pencil\" style=\"margin-left: 5px;\" aria-hidden=\"true\"></i>').find('input').remove();\n                var params = $.param({\n                    i: enmodal.session_id,\n                    name: newText\n                });\n                $.ajax({ url: \"map_name?\"+params,\n                    async: false,\n                    dataType: 'json',\n                    success: function(data, status) {\n                        enmodal.map_name = newText;\n                    }\n                });\n            }).keyup(function(e) {\n                if (e.keyCode == 13) {\n                    this.blur();\n                }\n            });\n        }\n    });\n\n    // Ctrl+key handlers\n    $(document).keydown(function(e) {\n        console.log(\"keydown\");\n        if (e.which === 89 && e.ctrlKey) {\n            console.log(\"ctrl+y\");\n            redo();\n        }\n        else if (e.which === 90 && e.ctrlKey) {\n            console.log(\"ctrl+z\");\n            undo();\n        }          \n    });\n    \n    new Clipboard('.share-link-copy-button');\n}\n\n// Globals.\nvar _id_factory;\nvar _leaflet_map;\nvar enmodal;\nvar _undo_buffer = [];\nvar _undo_index = null;\n\n$(function() {\n    // Create global variables and start the session\n    _id_factory = new IdFactory();\n    _leaflet_map = init_leaflet_map();\n    enmodal = {\n        public_key: null,\n        session_id: get_url_parameter(\"id\"),\n        sidebar: new Sidebar(),\n        sharing: new Sharing(),\n        leaflet_map: _leaflet_map,\n        transit_map: new Map(),\n        transit_interface: new TransitUI(_leaflet_map),\n        map_name: null,\n        data: new DataLayers(),\n        id_factory: _id_factory,\n    };\n    $(\"a#share\").click(function() {\n        enmodal.sharing.update(enmodal.public_key, enmodal.session_id);\n    });\n    set_basemap_style('DarkGray');\n    set_basemap_labels('DarkGray', true);\n    init_document();\n    if (enmodal.session_id !== null) {\n        session_load();\n    } else if (window.location.pathname != \"/view\") {\n        session_new();\n    }\n    push_undo_buffer();\n});","class Pin {\n    constructor(location) {\n        this.location = location;\n        this.sid = _id_factory.id();\n        this.marker = null;\n    }\n    \n    draw() {\n        enmodal.transit_interface.layers.active.line_paths.addLayer(this.marker);\n    }\n    \n    undraw() {\n        enmodal.transit_interface.layers.active.line_paths.removeLayer(this.marker);\n    }\n    \n    toJSON() {\n        return {\"sid\": this.sid, \"location\": this.location};\n    }\n}\n\nclass SplineSegment {\n    constructor(controls, centers) {\n        this.controls = controls;\n        this.centers = centers;\n    }\n}\n\nclass LineSplineSegment {\n    constructor(line, spline_segments, reverse) {\n        this.line = line;\n        this.spline_segments = spline_segments;\n        this.reverse = reverse;\n    }\n}\n\nclass BezierControlPoint {\n    constructor(lat, lng) {\n        this.lat = lat;\n        this.lng = lng;\n    }\n}\n\nclass BezierCenter {\n    constructor(lat, lng) {\n        this.lat = lat;\n        this.lng = lng;\n    }\n}","class DataLayers {\n    \n    constructor() {\n        this.active = null;\n        this.hexagon_bounds = null;\n        this.hexagon_zoom = null;\n    }\n    \n    draw_layer_population(force) {\n        this.active = \"population\";\n        this.get_hexagons(force);\n    }\n    \n    draw_layer_employment(force) {\n        this.active = \"employment\";\n        this.get_hexagons(force);\n    }\n    \n    draw_layer_ridership() {\n        var min_ridership = -1;\n        var max_ridership = 0;\n        var station, ridership;\n        for (var i = 0; i < enmodal.transit_interface.active_service.stations.length; i++) {\n            station = enmodal.transit_interface.active_service.stations[i];\n            ridership = station.ridership;\n            if (ridership > max_ridership) max_ridership = ridership;\n            if (ridership < min_ridership || min_ridership == -1) min_ridership = ridership;\n        }\n        for (i = 0; i < enmodal.transit_interface.active_service.stations.length; i++) {\n            station = enmodal.transit_interface.active_service.stations[i];\n            ridership = station.ridership;\n            var r = 39.0*(ridership-min_ridership)/(max_ridership-min_ridership) + 1;\n            enmodal.transit_interface.layers.data.addLayer(L.circleMarker(station.location, {color: 'red', radius: r}));\n        }\n        //enmodal.transit_interface.map.addLayer(enmodal.transit_interface.data_layer);\n        $(\"#scale-boxes\").empty();\n        for (i = 0; i < 10; i++) {\n            $(\"#scale-boxes\").append('<div class=\"scale-box\"><div class=\"scale-inner\" style=\"width: '+((i+1)*2).toString()+'px; height: '+((i+1)*2).toString()+'px; top: '+(20-(i+1)).toString()+'px;\"></div>');\n        }\n        $(\"#scale-low\").text(Math.round(min_ridership));\n        $(\"#scale-mid\").text(Math.round((max_ridership-min_ridership)/2 + min_ridership));\n        $(\"#scale-high\").text(Math.round(max_ridership));\n        $(\"#scale-units\").html(\"weekday riders\");\n        $(\"#scale\").show();\n    }\n    \n    draw_active_layer(force) {\n        if (this.active == \"population\") this.draw_layer_population(force);\n        if (this.active == \"employment\") this.draw_layer_employment(force);\n        if (this.active == \"ridership\") this.draw_layer_ridership();\n    }\n    \n    get_ridership() {\n        // Disabled\n        /*\n        var params = $.param({\n            i: enmodal.session_id\n        });\n        $.ajax({ url: \"transit_model?\"+params,\n            async: ASYNC_REQUIRED,\n            dataType: 'json',\n            success: function(data, status) {\n                //console.log(data);\n                for (var i in data) {\n                    var ridership = data[i];\n                    var station = enmodal.transit_interface.active_service.get_station_by_id(parseInt(i));\n                    if (station !== null) {\n                        station.ridership = ridership;\n                        $(\"#stationriders-\"+station.sid.toString()).text(Math.round(station.ridership).toString());\n                    }\n                }\n            }\n        });\n        */\n    }\n    \n    quantiles(geojson, num_breaks, feature_name) {\n        var property_array = [];\n        for (var i = 0; i < geojson.features.length; i++) {\n            property_array.push(geojson.features[i].properties[feature_name]);\n        }\n        property_array.sort(sortNumber);\n        var breaks = [];\n        var index = property_array.length - 1;\n        index -= Math.round(property_array.length/num_breaks);\n        for (var j = 0; j <= num_breaks; j++) {\n            breaks.push(property_array[index]);\n            index -= Math.round(property_array.length/num_breaks);\n            if (index < 0) index = 0;\n        }\n        return breaks;\n            \n    }\n\n    population_color(d, breaks, scale) {\n        var num_breaks = breaks.length - 1;\n        for (var i = 0; i < num_breaks; i++) {\n            if (d >= breaks[i]) return scale(i/num_breaks).hex();\n        }\n        return scale[num_breaks-1];\n    }\n    \n    get_hexagons(force) {\n        var initial_bounds = enmodal.leaflet_map.getBounds();\n        var bounds = initial_bounds.pad(0.5); // Pad for maximum scrollability\n        \n        var do_it = true;\n        if (this.hexagon_bounds !== null && this.hexagon_zoom !== null) {\n            if (this.hexagon_bounds.contains(initial_bounds) && enmodal.transit_interface.map.getZoom() == this.hexagon_zoom) {\n                do_it = false;\n            }\n        }\n        if(enmodal.transit_interface.map.getZoom() < MIN_ZOOM) do_it = false;\n        var request_num = enmodal.transit_interface.data_layer_request_num;\n        if (force) do_it = true;\n        \n        if (do_it) {\n            this.hexagon_bounds = bounds;\n            this.hexagon_zoom = enmodal.transit_interface.map.getZoom();\n            var params = $.param({\n                i: enmodal.session_id,\n                lat_min: bounds.getSouth(),\n                lat_max: bounds.getNorth(),\n                lng_min: bounds.getWest(),\n                lng_max: bounds.getEast()\n            });\n            $.ajax({ url: \"get_hexagons?\"+params,\n                async: ASYNC_REQUIRED,\n                dataType: 'text',\n                success: function(data_zip, status) {\n                    var data = JSON.parse(data_zip);\n                    \n                    var num_breaks = 8;\n                    var breaks = enmodal.data.quantiles(data, num_breaks, enmodal.data.active);\n                    var scale = HEXAGON_SCALES[enmodal.data.active];\n                    $(\"#scale-boxes\").empty();\n                    for (var i = 0; i < num_breaks; i++) {\n                        $(\"#scale-boxes\").append('<div class=\"scale-box\" style=\"background-color: '+scale((num_breaks-i)/num_breaks).hex()+' \"></div>');\n                    }\n                    $(\"#scale-low\").text(\"0\");\n                    $(\"#scale-mid\").text(Math.round(breaks[Math.round((num_breaks-1)/2)]/DGGRID_AREA).toString());\n                    $(\"#scale-high\").text(Math.round(breaks[0]/DGGRID_AREA).toString());\n                    $(\"#scale-units\").html(HEXAGON_UNITS[enmodal.data.active]);\n                    $(\"#scale\").show();\n                    \n                    enmodal.transit_interface.layers.data.clearLayers();\n\n                    if (enmodal.leaflet_map.getZoom() < 14) {\n                        enmodal.transit_interface.layers.data.addLayer(L.vectorGrid.slicer(data, {\n                            vectorTileLayerStyles: {\n                                sliced: function(properties, zoom) {\n                                    var property = 0;\n                                    if (enmodal.data.active == \"population\") property = properties.population;\n                                    if (enmodal.data.active == \"employment\") property = properties.employment;\n                                    return {\n                                        fillColor: enmodal.data.population_color(property, breaks, scale),\n                                        fill: true,\n                                        weight: 0,\n                                        opacity: 1,\n                                        color: 'white',\n                                        fillOpacity: 0.35\n                                    };\n                                }\n                            }\n                        }));\n                    } else {\n                        enmodal.transit_interface.layers.data.addLayer(L.geoJson(data, {style: function(feature) {\n                            var property = 0;\n                            if (enmodal.data.active == \"population\") property = feature.properties.population;\n                            if (enmodal.data.active == \"employment\") property = feature.properties.employment;\n                            return {\n                                fillColor: enmodal.data.population_color(property, breaks, scale),\n                                weight: 0,\n                                opacity: 1,\n                                color: 'white',\n                                fillOpacity: 0.35\n                            };\n                        }}));\n                    }\n                    enmodal.transit_interface.layers.active.line_paths.bringToFront();\n                    enmodal.leaflet_map.setMinZoom(MIN_ZOOM);\n                }\n            });\n        }\n    }\n    \n    hide_layers() {\n        this.active = null;\n        enmodal.transit_interface.layers.data.clearLayers();\n    }\n    \n}","// Vue components\n\nVue.component('modal-city-picker', {\n    template: '#template-modal-city-picker',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('modal-pro-gate', {\n    template: '#template-modal-pro-gate',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('modal-exporting-pdf', {\n    template: '#template-modal-exporting-pdf',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('modal-sharing', {\n    template: '#template-modal-sharing',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('modal-session-expired', {\n    template: '#template-modal-session-expired',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('collapse-caret', {\n    template: '#template-collapse-caret',\n    props: {\n        visible: {type: Boolean, default: true},\n        dataTargetProp: \"\",\n        dataTargetValue: \"\",\n    },\n    methods: {\n      reset() {\n        this.collapsed = false;\n      },\n      collapse() {\n        console.log(this.dataTargetProp);\n        console.log(this.dataTargetValue);\n        if (this.collapsed) {\n          this.collapsed = false;\n          $(\"[\"+this.dataTargetProp+\"='\"+this.dataTargetValue+\"']\").show();\n        } else {\n          this.collapsed = true;\n          $(\"[\"+this.dataTargetProp+\"='\"+this.dataTargetValue+\"']\").hide();\n        }\n      },\n    },\n    mounted() {\n      this.reset();\n    },\n});\n\n\nVue.component('button-import-gtfs', {\n  template: '#template-button-import-gtfs',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('button-import-json', {\n  template: '#template-button-import-json',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('button-sharing', {\n  template: '#template-button-sharing',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n});\n\nVue.component('button-export-pdf', {\n  template: '#template-button-export-pdf',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n    methods: {\n      exportPdf: function() {\n        app.modal = 'exporting-pdf';\n        save_pdf(function() {\n          app.modal = 'none';\n        });\n      }\n    }\n});\n\nVue.component('button-export-json', {\n  template: '#template-button-export-json',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n    methods: {\n      exportJson: function() {\n        save_json(function() {});\n      }\n    }\n});\n\nVue.component('button-basemap-style', {\n  template: '#template-button-basemap-style',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n    methods: {\n      setBasemap: function(basemap) {\n        if (basemap != app.basemapStyle) {\n          set_basemap_style(basemap);\n          set_basemap_labels(basemap, app.basemapLabels);\n          app.basemapStyle = basemap;\n        }\n      }\n    }\n});\n\nVue.component('button-basemap-labels', {\n  template: '#template-button-basemap-labels',\n    props: {\n        visible: {type: Boolean, default: true}\n    },\n    methods: {\n      setLabels: function(s) {\n        if (s != app.basemapLabels) {\n          set_basemap_labels(app.basemapStyle, s);\n          app.basemapLabels = s;\n        }\n      }\n    }\n});\n\nconst STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_ANALYZING = 2, STATUS_SUCCESS = 3, STATUS_FAILED = 4, STATUS_IMPORTING = 5;\n\nVue.component('modal-gtfs-import', {\n    template: '#template-modal-gtfs-import',\n    props: {\n        visible: {type: Boolean, default: true},\n        uploadFieldName: 'gtfs',\n        fileCount: 0,\n    },\n    computed: {\n      isInitial() {\n        return app.upload_status === STATUS_INITIAL;\n      },\n      isSaving() {\n        return app.upload_status === STATUS_SAVING;\n      },\n      isAnalyzing() {\n        return app.upload_status === STATUS_ANALYZING;\n      },\n      isSuccess() {\n        return app.upload_status === STATUS_SUCCESS;\n      },\n      isFailed() {\n        return app.upload_status === STATUS_FAILED;\n      },\n      isImporting() {\n        return app.upload_status === STATUS_IMPORTING;\n      },\n      gtfsImportMap() {\n        return app.gtfsImportMap;\n      }\n    },\n    methods: {\n      reset: function() {\n        // reset form to initial state\n        this.uploadedFiles = [];\n        this.uploadError = null;\n        this.gtfsImportMap = null;\n      },\n      upload: function(formData, onSuccess, onError) {\n        var params = $.param({\n            i: enmodal.session_id\n        });\n        $.ajax({ url: \"gtfs_upload?\"+params,\n            async: true,\n            data: formData,\n            cache: false,\n            contentType: false,\n            processData: false,\n            method: 'POST',\n            success: function(data){\n              onSuccess([]);\n            }\n        });\n      },\n      save: function(formData) {\n        // upload data to the server\n        app.upload_status = STATUS_SAVING;\n\n        this.upload(formData, function(x) {\n            this.uploadedFiles = [].concat(x);\n            app.upload_status = STATUS_ANALYZING;\n            var params = $.param({\n                i: enmodal.session_id\n            });\n            $.ajax({ url: \"gtfs_analyze?\"+params,\n              async: true,\n              dataType: 'json',\n              success: function(data, status) {\n                app.upload_status = STATUS_SUCCESS;\n                app.gtfsImportMap = data;\n                console.log(data);\n              }\n            });\n\n          }, function(err) {\n            this.uploadError = err.response;\n            app.upload_status = STATUS_FAILED;\n          });\n      },\n      filesChange: function(fieldName, fileList) {\n        // handle file changes\n        const formData = new FormData();\n\n        if (!fileList.length) return;\n\n        // append the files to FormData\n        Array\n          .from(Array(fileList.length).keys())\n          .map(x => {\n            formData.append(fieldName, fileList[x], fileList[x].name);\n          });\n\n        // save it\n        this.save(formData);\n      },\n      // These methods use jQuery hacks for now until component includes checkbox state\n      toggleAgency: function(agency) {\n        var agencyState = $(\"input:checkbox.agency[data-agency-id='\"+agency+\"']\").prop(\"checked\");\n        var checkBoxes = $(\"input:checkbox.route[data-agency-id='\"+agency+\"']\");\n        checkBoxes.prop(\"checked\", agencyState);\n      },\n      selectAll: function() {\n        console.log(\"select all\");\n        $(\"input:checkbox.agency\").prop('checked', true);\n        $(\"input:checkbox.route\").prop('checked', true);\n      },\n      selectNone: function() {\n        console.log(\"select none\");\n        $(\"input:checkbox.agency\").prop('checked', false);\n        $(\"input:checkbox.route\").prop('checked', false);\n      },\n      start: function() {\n        console.log(\"importing\");\n        app.upload_status = STATUS_IMPORTING;\n\n        var services = [];\n        var lines = [];\n\n        $(\"input:checkbox.route\").each(function() {\n          var state = $(this).prop(\"checked\");\n          if (state) {\n            var agency = $(this).attr(\"data-agency-id\");\n            var route = $(this).attr(\"data-route-id\");\n            if (services.indexOf(agency) == -1) {\n              services.push(agency);\n            }\n            if (lines.indexOf(route) == -1) {\n              lines.push(route);\n            }\n          }\n        });\n\n        console.log(services);\n        console.log(lines);\n\n        var params = $.param({\n            i: enmodal.session_id\n        });\n        var data = {\n          \"services\": services,\n          \"lines\": lines\n        };\n        $.ajax({ url: \"gtfs_import?\"+params,\n          async: true,\n          data: JSON.stringify(data),\n          dataType: 'json',\n          contentType: \"application/json\",\n          method: 'POST',\n          success: function(data, status) {\n            app.modal = 'none';\n            handle_map_data(data);\n          }\n        });\n      },\n    },\n    mounted() {\n      this.reset();\n    },\n});\n\nVue.component('modal-json-import', {\n    template: '#template-modal-json-import',\n    props: {\n        visible: {type: Boolean, default: true},\n        uploadFieldName: 'json',\n        fileCount: 0,\n    },\n    computed: {\n      isInitial() {\n        return app.json_import_status === STATUS_INITIAL;\n      },\n      isSaving() {\n        return app.json_import_status === STATUS_SAVING;\n      },\n      isSuccess() {\n        return app.json_import_status === STATUS_SUCCESS;\n      },\n      isFailed() {\n        return app.json_import_status === STATUS_FAILED;\n      }\n    },\n    methods: {\n      reset: function() {\n        // reset form to initial state\n        this.uploadedFiles = [];\n        this.uploadError = null;\n        this.jsonImportMap = null;\n      },\n      upload: function(formData, onSuccess, onError) {\n      },\n      save: function(file) {\n        console.log(\"importing\");\n        app.json_import_status = STATUS_SAVING;\n\n        var reader = new FileReader();\n        reader.onload = (function(theFile) {\n            return function(e) {\n                // Render thumbnail.\n                var data = JSON.parse(e.target.result);\n                var jdata = data.map;\n                jdata.settings = data.settings;\n                handle_map_data(jdata);\n                app.json_import_status = STATUS_INITIAL;\n                app.modal = 'none';\n            };\n        })(file);\n\n        var d = reader.readAsText(file);\n      },\n      filesChange: function(fieldName, fileList) {\n        // handle file changes\n        const formData = new FormData();\n\n        if (!fileList.length) return;\n\n        // save it\n        this.save(fileList[0]);\n      },\n    },\n    mounted() {\n      this.reset();\n    },\n});\n\nvar app = new Vue({\n    el: '#app',\n    data: {\n      modal: 'city-picker',\n      upload_status: STATUS_INITIAL,\n      json_import_status: STATUS_INITIAL,\n      gtfsImportMap: null,\n      basemapStyle: 'DarkGray',\n      basemapLabels: true\n    }\n});","class LinePath {\n\n    constructor() {\n        this.raw_edge_paths = [];\n        this.edge_paths = [];\n    }\n\n    get_path_for_edge(edge) {\n        for (var i = 0; i < this.edge_paths.length; i++) {\n            if (this.edge_paths[i].edge_id == edge.sid) {\n                return this.edge_paths[i];\n            }\n        }\n        return null;\n    }\n\n    get_raw_path_for_edge(edge) {\n        for (var i = 0; i < this.raw_edge_paths.length; i++) {\n            if (this.raw_edge_paths[i].edge_id == edge.sid) {\n                return this.raw_edge_paths[i];\n            }\n        }\n        return null;\n    }\n}\n\nclass EdgePath {\n\n    constructor(edge_id, stop_points, control_points, offset, color, opacity) {\n        this.edge_id = edge_id;\n        this.stop_points = stop_points;\n        this.control_points = control_points;\n        this.custom_control_points = [];\n        this.offset = offset;\n        this.color = color;\n        this.opacity = opacity;\n        this.track_width = TRACK_WIDTH;\n        this.path = this.generate_path(this.color, this.opacity);\n    }\n\n    generate_path(color, opacity) {\n        var path;\n        if (this.control_points.length === 0) {\n            path = L.polyline([L.latLng(this.stop_points[0][0], this.stop_points[0][1]), L.latLng(this.stop_points[1][0], this.stop_points[1][1])], {weight: this.track_width, color: color, opacity: opacity});\n        } else if (this.control_points[0].length === 0) {\n            path = L.polyline([L.latLng(this.stop_points[0][0], this.stop_points[0][1]), L.latLng(this.stop_points[1][0], this.stop_points[1][1])], {weight: this.track_width, color: color, opacity: opacity});\n        } else {\n            var bezier_options = [\n                                    'M',\n                                    [this.stop_points[0][0], this.stop_points[0][1]]\n                                ];\n            for (var i = 0; i < this.control_points.length; i++) {\n                var new_options = ['C',\n                                    [this.control_points[i][0].lng, this.control_points[i][0].lat],\n                                    [this.control_points[i][1].lng, this.control_points[i][1].lat],\n                                    [this.stop_points[i+1][0], this.stop_points[i+1][1]]\n                                ];\n                bezier_options.push.apply(bezier_options, new_options);\n            }\n            var curve_options = {\"color\": color, \"weight\": this.track_width, \"opacity\": opacity, \"fill\": false, \"smoothFactor\": 1.0, \"offset\": this.offset*(this.track_width/2), \"clickable\": false, \"pointer-events\": \"none\", \"className\": \"no-hover\"};\n            path = L.curve(bezier_options, curve_options);\n        }\n        return path;\n    }\n\n    regenerate_path() {\n        this.path = this.generate_path(this.color, this.opacity);\n    }\n}\n\nclass LineColor {\n\n    constructor(r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.fr = 255;\n        this.fg = 255;\n        this.fb = 255;\n        if ((r + g + b) > (255*3/2)) {\n            this.fr = 0;\n            this.fg = 0;\n            this.fb = 0;\n        }\n    }\n\n    bg_hex() {\n        var rs = (\"0\" + this.r.toString(16).toUpperCase()).slice(-2);\n        var rg = (\"0\" + this.g.toString(16).toUpperCase()).slice(-2);\n        var rb = (\"0\" + this.b.toString(16).toUpperCase()).slice(-2);\n        return \"#\"+rs+rg+rb;\n    }\n\n    fg_hex() {\n        var rs = (\"0\" + this.fr.toString(16).toUpperCase()).slice(-2);\n        var rg = (\"0\" + this.fg.toString(16).toUpperCase()).slice(-2);\n        var rb = (\"0\" + this.fb.toString(16).toUpperCase()).slice(-2);\n        return \"#\"+rs+rg+rb;\n    }\n}\n\nclass Hexagon {\n    \n    constructor(id, geo, color, opacity) {\n        this.sid = id;\n        this.geo = geo;\n        this.color = color;\n        this.opacity = opacity;\n        this.style = this.generate_style();\n        this.poly = this.generate_poly();\n    }\n    \n    generate_poly() {\n        return L.geoJSON(this.geo, {style: this.style});\n    }\n    \n    update_poly() {\n        this.poly = this.generate_poly();\n    }\n    \n    generate_style() {\n        return {\n            color: this.color,\n            stroke: false,\n            fillOpacity: this.opacity\n        };\n    }\n    \n    update_style() {\n        this.style = this.generate_style();\n        this.poly.setStyle(this.style);\n        //this.poly.redraw();\n    }\n    \n    draw() {\n        NS_interface.data_layer.addLayer(this.poly);\n    }\n}","var OUTPUT_WIDTH_PX = 2000;\nvar OUTPUT_HEIGHT_PX = 2000;\nvar OUTPUT_DPI = 72;\nvar OUTPUT_WIDTH_PT = OUTPUT_WIDTH_PX * (0.75);\nvar OUTPUT_HEIGHT_PT = OUTPUT_HEIGHT_PX * (0.75);\n\nfunction save_svg(canvas, callback) {\n    var draw = SVG('svg-drawing').size(OUTPUT_HEIGHT_PX,OUTPUT_WIDTH_PX);\n    \n    var svg_overlay = $(\"div.leaflet-overlay-pane svg\").html();\n    var svg_markers = $(\"div.leaflet-stationMarker-pane svg\").html();\n    \n    draw.svg(svg_overlay);\n    draw.svg(svg_markers);\n    \n    var b64 = btoa(draw.svg());\n    //var link = $('<a href=\"data:image/svg+xml;base64,\\n'+b64+'\" download=\"enmodal-'+enmodal.session_id+'.svg\" style=\"display:none;\"></a>').appendTo('body');\n    //link[0].click();\n\n\n    canvgv2(document.getElementById('canvas'), draw.svg());\n    var d = document.getElementById('canvas').toDataURL(\"image/png\");\n    $('#svg-drawing').empty();\n\n    var ctx = canvas.getContext(\"2d\");\n\n\tvar image = new Image();\n\n\tvar pixel_bounds = _leaflet_map.getPixelBounds();\n\tvar pixel_origin = _leaflet_map.getPixelOrigin();\n\tvar placement_x = pixel_origin.x - pixel_bounds.min.x;\n\tvar placement_y = pixel_origin.y - pixel_bounds.min.y;\n\n\timage.onload = function() {\n\t    ctx.drawImage(image, placement_x, placement_y);\n\t    callback(ctx);\n\t};\n\timage.src = d;\n\t//var link = $('<a href=\"'+d+'\" download=\"enmodal-'+enmodal.session_id+'.png\" style=\"display:none;\"></a>').appendTo('body');\n    //link[0].click();\n}\n\nfunction create_image(callback) {\n\n\tvar center = _leaflet_map.getCenter();\n\tvar zoom = _leaflet_map.getZoom();\n\n\t$(\"#map\").css(\"height\", OUTPUT_HEIGHT_PX);\n\t$(\"#map\").css(\"width\", OUTPUT_WIDTH_PX);\n\t_leaflet_map.invalidateSize();\n\n    enmodal.transit_interface.preview_clear();\n    var bounds = enmodal.transit_map.geographic_bounds();\n    if (bounds !== null) _leaflet_map.fitBounds(bounds);\n\n\t//_leaflet_map.setView(center, zoom);\n\n\t$(\"#map\").hide();\n\tsetTimeout(function() {\n\t\tleafletImage(_leaflet_map, function(err, canvas) {\n\t\t    //var dimensions = _leaflet_map.getSize();\n\t\t    save_svg(canvas, function(ctx) {\n\t\t    \t// Add enmodal footer\n\t\t    \tctx.fillStyle = 'rgba(0,0,0,0.75)';\n\t\t    \tctx.fillRect(0, 1964, 2000, 36);\n\t\t    \tctx.font = '12px sans-serif';\n\t\t    \tctx.fillStyle = 'white';\n\t\t    \tif (enmodal.map_name !== null) {\n\t\t    \t\tctx.fillText(enmodal.map_name, 12, 1988);\n\t\t    \t}\n\t\t    \tctx.textAlign = 'right';\n\t\t    \tctx.fillText(\"created with enmodal -- http://enmodal.io\", 1988, 1988);\n\t\t    \tcallback(canvas);\n\t\t    });\n\t\t});\n\t}, 1000);\n}\n\nfunction save_image() {\n\tcreate_image(function(canvas) {\n\t\tvar link = $('<a href=\"'+canvas.toDataURL(\"image/png\")+'\" download=\"enmodal-'+enmodal.session_id+'.png\" style=\"display:none;\"></a>').appendTo('body');\n    \tlink[0].click();\n    \tvar ctx = canvas.getContext(\"2d\");\n    \tctx.clearRect(0, 0, canvas.width, canvas.height);\n    \tdocument.getElementById('canvas').getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n\t});\n}\n\nfunction save_pdf(callback) {\n\tcreate_image(function(canvas) {\n\t\tvar pdf = new jsPDF({\n\t\t\torientation: 'landscape',\n\t\t\tunit: 'pt',\n\t\t\tformat: [OUTPUT_WIDTH_PT, OUTPUT_HEIGHT_PT]\n\t\t});\n\t\tpdf.addImage(canvas.toDataURL(\"image/jpeg\", 1.0), 'JPEG', 0, 0);\n\t\tpdf.save('enmodal-'+enmodal.session_id+'.pdf');\n    \tvar ctx = canvas.getContext(\"2d\");\n    \tctx.clearRect(0, 0, canvas.width, canvas.height);\n    \tdocument.getElementById('canvas').getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n\t\t$(\"#map\").css(\"height\", \"\");\n\t\t$(\"#map\").css(\"width\", \"\");\n    \t$(\"#map\").show();\n\t\t_leaflet_map.invalidateSize();\n\t\tcallback();\n\t});\n}","class TransitUI {\n\n    constructor(map) {\n        this.active_service = null;\n        this.active_line = null;\n        this.station_markers = [];\n        this.line_paths = {}; // line id :: LinePath\n        this.station_pairs = [];\n        this.preview_paths = [];\n        this.map = map;\n\n        this.active_tool = \"station\";\n        \n        this.data_layer_request_num = 0;\n        this.preview_paths_enabled = true;\n\n        this.nearest_station_to_mouse = null;\n        this.station_for_bezier_edits = null;\n        this.moving_station_marker = null; // Station marker being dragged\n        this.station_to_merge = null; // Station to be merged with when moving station marker is released\n        \n        this.dragging_pin = false;\n        this.station_pair_id_move_count_map = {};\n        \n        this.preview_line_pin_marker = null;\n\n        this.active_transfer_station = null;\n        \n        this.pane_station_markers = this.map.createPane(\"stationMarkerPane\");\n        this.pane_station_markers = this.map.createPane(\"inactiveStationMarkerPane\");\n        //this.pane_station_markers.style.zIndex = 8000;\n        \n        this.layers = {\n            active: {\n                line_paths: L.featureGroup(),\n                transfers: L.featureGroup(),\n                station_markers: L.featureGroup({pane: \"stationMarkerPane\"}),\n            },\n            inactive: {\n                line_paths: L.featureGroup(),\n                transfers: L.featureGroup(),\n                station_markers: L.featureGroup({pane: \"inactiveStationMarkerPane\"}),\n            },\n            basemap: null,\n            basemapLabels: null,\n            preview: L.featureGroup(),\n            data: L.featureGroup(),\n        };\n            \n        //this.layers.active.line_paths = L.featureGroup();\n        //this.transfer_layer = L.featureGroup();\n        //this.layers.active.station_markers = L.featureGroup({pane: \"stationMarkerPane\"});\n        //this.layers.preview = L.featureGroup();\n        //this.bezier_layer = L.featureGroup();\n        //this.data_layer = L.featureGroup();\n        \n        this.hexagons = {}; // Indexed by hexagon gid\n        this.chroma_scale = chroma.scale('YlGnBu');\n\n        \n        this.map.addLayer(this.layers.data);\n        this.map.addLayer(this.layers.active.line_paths);\n        this.map.addLayer(this.layers.active.transfers);\n        this.map.addLayer(this.layers.active.station_markers);\n        this.map.addLayer(this.layers.inactive.line_paths);\n        this.map.addLayer(this.layers.inactive.transfers);\n        this.map.addLayer(this.layers.inactive.station_markers);\n        this.map.addLayer(this.layers.preview);\n\n        this.map.on('mouseup', () => {\n            this.map.dragging.enable();\n            this.map.removeEventListener('mousemove');\n            this.preview_paths_enabled = true;\n            this.map.on('mousemove', function(e) {\n                enmodal.transit_interface.preview_handler(e);\n            });\n            if (this.moving_station_marker !== null) {\n                if (this.station_to_merge !== null) {\n                    this.merge_stations(this.moving_station_marker.station, this.station_to_merge);\n                    //this.get_station_marker_by_station(this.station_to_merge).clear_merge();\n                    this.station_to_merge = null;\n                } else {\n                    this.update_station_info(this.moving_station_marker.station);\n                    this.moving_station_marker.update_tooltip();\n                    this.moving_station_marker.generate_popup();\n                    this.moving_station_marker.marker.openPopup();\n                }\n                if (this.active_service.mode == \"bus\") {\n                    // draw lines\n                    var lines = this.active_service.station_lines(this.moving_station_marker.station);\n                    for (var i = 0; i < lines.length; i++) {\n                        // force an update\n                        var station_pairs = enmodal.transit_interface.get_station_pairs_for_line(lines[i]);\n                        for (var j = 0; j < station_pairs.length; j++) {\n                            station_pairs[j].undraw_paths();\n                            station_pairs[j].paths = [];\n                            station_pairs[j].street_path_is_valid = false;\n                        }\n                        this.draw_line(lines[i], false, true, this.layers.active.line_paths, true, this.active_service);\n                    }\n                }\n                this.moving_station_marker = null;\n                this.purge_bad_transfers();\n                enmodal.sidebar.update_line_diagram();\n\n                push_undo_buffer();\n            }\n        });\n\n        this.map.on('mousemove', function(e) {\n            enmodal.transit_interface.preview_handler(e);\n        });\n\n        this.map.on('moveend', function(e) {\n            enmodal.data.draw_active_layer(false);\n            /*\n            if (enmodal.transit_interface.hexagon_layer != \"none\") {\n                if (enmodal.transit_interface.map.getZoom() >= MIN_ZOOM_FOR_HEXAGONS) {\n                    enmodal.transit_interface.get_hexagons(false);\n                } else {\n                    $(\"#scale-boxes\").empty();\n                    $(\"#scale-low\").text(\"\");\n                    $(\"#scale-mid\").text(\"Zoom in to see data\");\n                    $(\"#scale-high\").text(\"\");\n                    $(\"#scale-units\").text(\"\");\n                    $(\"#scale\").show();\n                }\n            }\n            */\n        });\n    }\n\n    draw_map() {\n        this.layers.active.station_markers.clearLayers();\n        this.layers.active.line_paths.clearLayers();\n        this.layers.inactive.station_markers.clearLayers();\n        this.layers.inactive.line_paths.clearLayers();\n\n        this.station_markers = [];\n        this.purge_station_pairs();\n\n        for (var i = 0; i < enmodal.transit_map.services.length; i++) {\n            var service = enmodal.transit_map.services[i];\n            var layer;\n            if (service == enmodal.transit_interface.active_service) {\n                layer = enmodal.transit_interface.layers.active;\n            } else {\n                layer = enmodal.transit_interface.layers.inactive;\n            }\n            enmodal.transit_interface.draw_service(service, layer, true, true);\n            for (var j = 0; j < service.stations.length; j++) {\n                var station = service.stations[j];\n                // Update popup.\n                var station_marker = enmodal.transit_interface.get_station_marker_by_station(station);\n                station_marker.generate_popup();\n                station_marker.update_tooltip();\n            }\n        }\n    }\n    \n    // Draw all stations and lines of a service onto a particular layer\n    draw_service(service, layer, active, clear) {\n        if (clear) {\n            // Clear layer\n            layer.station_markers.clearLayers();\n            this.station_markers = [];\n            layer.line_paths.clearLayers();\n            this.layers.inactive.station_markers.clearLayers();\n            this.layers.inactive.line_paths.clearLayers();\n        }\n        var i;\n        // Hide other services\n        if (active) {\n            for (i = 0; i < enmodal.transit_map.services.length; i++) {\n                if (enmodal.transit_map.services[i].sid != service.sid) {\n                    this.draw_service(enmodal.transit_map.services[i], this.layers.inactive, false, false);\n                }\n            }\n        }\n        for (i = 0; i < service.stations.length; i++) {\n            var station = service.stations[i];\n            this.create_station_marker(station, layer.station_markers, active, false);\n        }\n        for (i = 0; i < service.lines.length; i++) {\n            var line = service.lines[i];\n            this.draw_line(line, false, true, layer.line_paths, active, service);\n        }\n    }\n\n    get_insertion_result(line, stop) {\n\n        // Calculate edge reconfiguration\n        var best_edges = [];\n        var edges_to_remove = [];\n        var best_line_distance = -1;\n\n        var base_length = line.length();\n        var temp_length;\n\n        // Iterate twice through all stops on the line.\n        for (var i = 0; i < line.stops.length; i++) {\n            for (var j = 0; j < line.stops.length; j++) {\n\n                // Only calculate if the stops are different and not the one we just added\n                if ((i != j) && (line.stops[i].sid != stop.sid) && (line.stops[j].sid != stop.sid)) {\n\n                    var existing_stops = [line.stops[i], line.stops[j]];\n\n                    var temp_edge_1 = new Edge([stop, line.stops[i]], true);\n                    var temp_edge_2 = new Edge([stop, line.stops[j]], true);\n\n                    temp_length = base_length + temp_edge_1.length() + temp_edge_2.length();\n\n                    // Subtract any existing edges between the i- and j- stops\n                    var temp_edge_to_remove = null;\n                    for (var k = 0; k < line.edges.length; k++) {\n                        if (line.edges[k].compare_stops(existing_stops)) {\n                            temp_length -= line.edges[k].length();\n                            temp_edge_to_remove = line.edges[k];\n                        }\n                    }\n\n                    if (temp_length < best_line_distance || best_edges.length === 0) {\n                        best_line_distance = temp_length;\n                        best_edges = [temp_edge_1, temp_edge_2];\n                        edges_to_remove = [temp_edge_to_remove];\n                    }\n\n                }\n            }\n\n            // Compare with the null case for j\n            if (line.stops[i].sid != stop.sid) {\n                var temp_edge = new Edge([stop, line.stops[i]], true);\n                temp_length = base_length + temp_edge.length();\n\n                if (temp_length < best_line_distance || best_edges.length === 0) {\n                    best_line_distance = temp_length;\n                    best_edges = [temp_edge];\n                    edges_to_remove = [];\n                }\n            }\n\n        }\n        var delta = new LineDelta(best_edges, edges_to_remove);\n\n        return delta;\n    }\n    \n    lines_for_station_by_station_pair(station) {\n        // Returns all lines implicated in any station pairs involving this station\n        var lines = [];\n        for (var i = 0; i < this.station_pairs.length; i++) {\n            if (this.station_pairs[i].has_station(station)) {\n                var sp_lines = this.station_pairs[i].lines();\n                for (var j = 0; j < sp_lines.length; j++) {\n                    if (lines.indexOf(sp_lines[j]) == -1) {\n                        lines.push(sp_lines[j]);\n                    }\n                }\n            }\n        }\n        return lines;\n    }\n\n    create_station_marker(station, layer, active, open_popup) {\n        var station_marker = new StationMarker(station, active);\n\n        if (active) {\n            station_marker.marker.on('click', function(e) {\n                station_marker.marker.closeTooltip();\n                // Disable new station creation.\n                enmodal.transit_interface.map.off('click', handle_map_click);\n                setTimeout(function() {\n                    enmodal.transit_interface.map.on('click', handle_map_click);\n                }, 1000);\n\n                // Update popup.\n                station_marker.generate_popup();\n\n            });\n\n            station_marker.marker.on('mousedown', function (event) {\n                //L.DomEvent.stop(event);\n                enmodal.transit_interface.preview_paths_enabled = false;\n                enmodal.transit_interface.preview_clear();\n                enmodal.transit_interface.map.dragging.disable();\n                let {lat: circleStartingLat, lng: circleStartingLng} = station_marker.marker._latlng;\n                let {lat: mouseStartingLat, lng: mouseStartingLng} = event.latlng;\n\n                enmodal.transit_interface.map.on('mousemove', event => {\n                    if (enmodal.transit_interface.active_tool == \"station\") {\n                        if (enmodal.transit_interface.moving_station_marker === null) {\n                            enmodal.transit_interface.moving_station_marker = station_marker;\n                        }\n                        let {lat: mouseNewLat, lng: mouseNewLng} = event.latlng;\n                        let latDifference = mouseStartingLat - mouseNewLat;\n                        let lngDifference = mouseStartingLng - mouseNewLng;\n\n                        let center = [circleStartingLat-latDifference, circleStartingLng-lngDifference];\n                        station_marker.marker.setLatLng(center);\n                        station_marker.marker.closeTooltip();\n                        enmodal.transit_interface.map.closePopup();\n                        station_marker.station.move_to(center[0], center[1]);\n\n                        //var lines = enmodal.transit_interface.active_service.station_lines(station_marker.station);\n                        var lines = enmodal.transit_interface.lines_for_station_by_station_pair(station_marker.station);\n                        var station_pairs_to_draw = [];\n                        for (var i = 0; i < lines.length; i++) {\n                            // Re-draw lines (but don't render)\n                            enmodal.transit_interface.draw_line(lines[i], true, false, enmodal.transit_interface.layers.active.line_paths, true, enmodal.transit_interface.active_service);\n                            var station_pairs = enmodal.transit_interface.get_station_pairs_for_line(lines[i]);\n                            for (var j = 0; j < station_pairs.length; j++) {\n                                if (!(station_pairs[j] in station_pairs_to_draw)) {\n                                    station_pairs_to_draw.push(station_pairs[j]);\n                                }\n                            }\n                        }\n                        // Render all station pairs\n                        for (i = 0; i < station_pairs_to_draw.length; i++) {\n                            station_pairs_to_draw[i].draw();\n                        }\n                        enmodal.transit_interface.draw_transfers();\n                        // Find distance to other stations\n                        if (ALLOW_STATION_MERGING) {\n                            var mergeable = false;\n                            var m_px = enmodal.transit_interface.map.latLngToLayerPoint(L.latLng(center[0], center[1]));\n                            if (enmodal.transit_interface.active_service.station_is_end_of_line(station_marker.station)) {\n                                for (i = 0; i < enmodal.transit_interface.active_service.stations.length; i++) {\n                                    var station = enmodal.transit_interface.active_service.stations[i];\n                                    var s_px = enmodal.transit_interface.map.latLngToLayerPoint(L.latLng(station.location[0], station.location[1]));\n                                    var d = m_px.distanceTo(s_px);\n                                    if (station.sid != station_marker.station.sid) {\n                                        // Target is different from the moving station.\n                                        if (d < STATION_MERGE_THRESHOLD) {\n                                            // Target is within range.\n                                            if (enmodal.transit_interface.active_service.station_is_end_of_line(station)) {\n                                                // Target is end of a line.\n                                                enmodal.transit_interface.get_station_marker_by_station(station).show_merge();\n                                                enmodal.transit_interface.get_station_marker_by_station(station).marker.bringToFront();\n                                                enmodal.transit_interface.station_to_merge = station;\n                                                mergeable = true;\n                                            }\n                                        } else {\n                                            enmodal.transit_interface.get_station_marker_by_station(station).clear_merge();\n                                        }\n                                    }\n                                }\n                                if (!mergeable) enmodal.transit_interface.station_to_merge = null;\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        var station_marker_found = false;\n        \n        for (var i = 0; i < this.station_markers.length; i++) {\n            if (station == this.station_markers[i].station) {\n                this.station_markers[i] = station_marker;\n                station_marker_found = true;\n            }\n        }\n        if (!station_marker_found) this.station_markers.push(station_marker);\n        station_marker.marker.addTo(layer);\n        if (open_popup) station_marker.marker.openPopup();\n        return station_marker;\n    }\n    \n    get_station_marker_by_station(station) {\n        for (var i = 0; i < this.station_markers.length; i++) {\n            if (station.sid == this.station_markers[i].station.sid) {\n                return this.station_markers[i];\n            }\n        }\n        return null;\n    }\n    \n    get_station_marker_by_marker(marker) {\n        for (var i = 0; i < this.station_markers.length; i++) {\n            if (marker == this.station_markers[i].marker) {\n                return this.station_markers[i];\n            }\n        }\n        return null;\n    }\n\n    add_new_station(lat, lng) {\n\n        var station = new Station(\"...\", [lat, lng]);\n        var stop;\n        var line = this.active_line;\n        \n        stop = new Stop(station);\n        this.active_service.add_station(station);\n        line.add_stop(stop);\n        \n        var lines_to_draw = [line];\n        var best_edges= [];\n        var params;\n        var i, j, k, l;\n\n        // If the line has more than 1 stop, we'll need to reconfigure edges\n        if (line.stops.length > 1) {\n            var delta = this.get_insertion_result(line, stop);\n            best_edges = delta.add;\n            var edges_to_remove = delta.remove;\n\n            for (i = 0; i < best_edges.length; i++) {\n                // Give it a real ID\n                best_edges[i].sid = enmodal.id_factory.id();\n                line.add_edge(best_edges[i]);\n                \n                // Add any impacted lines\n                for (j = 0; j < best_edges[i].stops.length; j++) {\n                    var station_pairs = this.get_station_pairs(best_edges[i].stops[j].station);\n                    for (k = 0; k < station_pairs.length; k++) {\n                        var sp_line_lss = station_pairs[k][0].line_spline_segments;\n                        for (l = 0; l < sp_line_lss.length; l++) {\n                            var lss_line = sp_line_lss[l].line;\n                            if (lines_to_draw.indexOf(lss_line) == -1) {\n                                lines_to_draw.push(lss_line);\n                            }\n                        }\n                    }\n                }\n            }\n            for (i = 0; i < edges_to_remove.length; i++) {\n                for (j = 0; j < edges_to_remove[i].stops.length; j++) {\n                    var affected_station = edges_to_remove[i].stops[j].station;\n                    var station_lines = this.active_service.station_lines(affected_station);\n                    for (k = 0; k < station_lines.length; k++) {\n                        if (lines_to_draw.indexOf(station_lines[k]) == -1) {\n                            lines_to_draw.push(station_lines[k]);\n                        }\n                    }\n                }\n                line.remove_edge(edges_to_remove[i]);\n                if (INC_UPDATES) {\n                    params = $.param({\n                        i: enmodal.session_id,\n                        service_id: this.active_service.sid,\n                        line_id: line.sid,\n                        edge_id: edges_to_remove[i].sid\n                    });\n                    $.ajax({ url: \"edge_remove?\"+params,\n                        async: ASYNC_REQUIRED,\n                        dataType: 'json',\n                        success: check_server_error\n                    });\n                }\n            }\n        }\n        \n        // Sync with server\n        params = $.param({\n            i: enmodal.session_id,\n            service_id: this.active_service.sid,\n            station_id: station.sid,\n            lat: lat,\n            lng: lng\n        });\n        $.ajax({ url: \"station_add?\"+params,\n            async: ASYNC_REQUIRED,\n            dataType: 'json',\n            success: function(data, status) {\n                check_server_error(data);\n                station.name = data.name;\n                if (\"locality\" in data) {\n                    station.locality = data.locality;\n                }\n                if (\"neighborhood\" in data) {\n                    station.neighborhood = data.neighborhood;\n                }\n                if (\"region\" in data) {\n                    station.region = data.region;\n                }\n                // Update popup.\n                var station_marker = enmodal.transit_interface.get_station_marker_by_station(station);\n                station_marker.generate_popup();\n                station_marker.update_tooltip();\n                enmodal.sidebar.update_line_diagram();\n                \n                params = $.param({\n                    i: enmodal.session_id,\n                    service_id: enmodal.transit_interface.active_service.sid,\n                    line_id: line.sid,\n                    station_id: station.sid,\n                    stop_id: stop.sid\n                });\n                if (INC_UPDATES) {\n                    $.ajax({ url: \"stop_add?\"+params,\n                        async: false,\n                        dataType: 'json',\n                        success: function(data, status) {\n                            check_server_error(data);\n                            for (var i = 0; i < best_edges.length; i++) {\n                                var params = $.param({\n                                    i: enmodal.session_id,\n                                    service_id: enmodal.transit_interface.active_service.sid,\n                                    line_id: line.sid,\n                                    stop_1_id: best_edges[i].stops[0].sid,\n                                    stop_2_id: best_edges[i].stops[1].sid,\n                                    edge_id: best_edges[i].sid\n                                });\n                                $.ajax({ url: \"edge_add?\"+params,\n                                    async: ASYNC_REQUIRED,\n                                    dataType: 'json',\n                                    success: check_server_error\n                                });\n                            }\n                        }\n                    });\n                }\n            }\n        });\n\n        var station_marker = this.create_station_marker(station, this.layers.active.station_markers, true, true);\n        \n        for (i = 0; i < lines_to_draw.length; i++) {\n            this.draw_line(lines_to_draw[i], false, true, this.layers.active.line_paths, true, this.active_service);\n        }\n        \n        this.purge_station_pairs();\n        enmodal.data.get_ridership();\n        enmodal.sidebar.update_line_diagram();\n        \n        push_undo_buffer();\n\n        return station;\n    }\n    \n    clean_edges(line) {\n        // Check for self-edges\n        var edge;\n        var edges_removed = line.remove_self_edges();\n        var params;\n        for (var j = 0; j < edges_removed.length; j++) {\n            edge = edges_removed[j];\n            if (INC_UPDATES) {\n                params = $.param({\n                    i: enmodal.session_id,\n                    service_id: this.active_service.sid,\n                    line_id: line.sid,\n                    edge_id: edge.sid\n                });\n                $.ajax({ url: \"edge_remove?\"+params,\n                    async: ASYNC_REQUIRED,\n                    dataType: 'json',\n                    success: check_server_error\n                });\n            }\n        }\n        // Check for duplicate edges\n        edges_removed = line.remove_duplicate_edges();\n        for (j = 0; j < edges_removed.length; j++) {\n            edge = edges_removed[j];\n            if (INC_UPDATES) {\n                params = $.param({\n                    i: enmodal.session_id,\n                    service_id: this.active_service.sid,\n                    line_id: line.sid,\n                    edge_id: edge.sid\n                });\n                $.ajax({ url: \"edge_remove?\"+params,\n                    async: ASYNC_REQUIRED,\n                    dataType: 'json',\n                    success: check_server_error\n                });\n            }\n        }\n    }\n    \n    add_edge(service, line, edge) {\n        line.add_edge(edge);\n        if (INC_UPDATES) {\n            var params = $.param({\n                i: enmodal.session_id,\n                service_id: service.sid,\n                line_id: line.sid,\n                stop_1_id: edge.stops[0].sid,\n                stop_2_id: edge.stops[1].sid,\n                edge_id: edge.sid\n            });\n            $.ajax({ url: \"edge_add?\"+params,\n                async: ASYNC_REQUIRED,\n                dataType: 'json',\n                success: function(data, status) {\n                    check_server_error(data);\n                }\n            });\n        }\n    }\n    \n    merge_stations(station_to_remove, station_to_keep) {\n        // For all lines\n        for (var i = 0; i < this.active_service.lines.length; i++) {\n            var line = this.active_service.lines[i];\n            // Find relevant stops\n            var stop_to_remove = null;\n            var stop_to_keep = null;\n            for (var j = 0; j < line.stops.length; j++) {\n                var stop = line.stops[j];\n                if (stop.station.sid == station_to_remove.sid) {\n                    stop_to_remove = stop;\n                }\n                if (stop.station.sid == station_to_keep.sid) {\n                    stop_to_keep = stop;\n                }\n            }\n            // If stop to remove exists but not stop to keep \n            // TODO FIX this!!\n            /*\n            if (stop_to_remove != null && stop_to_keep == null) {\n                // Create a stop on the station to keep\n                var new_stop = new Stop(station_to_keep, false);\n                line.add_stop(new_stop);\n                if (INC_UPDATES) {\n                    var params = $.param({\n                        i: enmodal.session_id,\n                        service_id: this.active_service.sid,\n                        line_id: line.sid,\n                        station_id: station_to_keep.sid,\n                        stop_id: new_stop.sid\n                    });\n                    var line_to_use = line;\n                    var stop_1_to_use = stop_to_remove;\n                    var stop_2_to_use = new_stop;\n                    $.ajax({ url: \"stop_add?\"+params,\n                        async: ASYNC_REQUIRED,\n                        dataType: 'json',\n                        success: function(data, status) {\n                            // Connect with an edge\n                            var new_edge = new Edge([stop_1_to_use, stop_2_to_use]);\n                            enmodal.transit_interface.add_edge(enmodal.transit_interface.active_service, line_to_use, new_edge);\n                            enmodal.transit_interface.clean_edges(line_to_use);\n                        }\n                    });\n                }\n            }\n            */\n            \n            // If both stops exists on this line\n            if (stop_to_remove !== null && stop_to_keep !== null) {\n                // Connect with an edge\n                var new_edge = new Edge([stop_to_remove, stop_to_keep]);\n                line.add_edge(new_edge);\n                if (INC_UPDATES) {\n                    var params = $.param({\n                        i: enmodal.session_id,\n                        service_id: this.active_service.sid,\n                        line_id: line.sid,\n                        stop_1_id: new_edge.stops[0].sid,\n                        stop_2_id: new_edge.stops[1].sid,\n                        edge_id: new_edge.sid\n                    });\n                    $.ajax({ url: \"edge_add?\"+params,\n                        async: ASYNC_REQUIRED,\n                        dataType: 'json',\n                        success: check_server_error\n                    });\n                }\n            }\n            \n            this.clean_edges(line);\n            \n        }\n        \n        // remove station with forced closure\n        this.remove_station(station_to_remove.sid, true);\n        \n        \n        // draw lines\n        var lines = this.active_service.station_lines(station_to_keep);\n        for (i = 0; i < lines.length; i++) {\n            this.draw_line(lines[i], false, true, this.layers.active.line_paths, true, this.active_service);\n        }\n    }\n\n    update_station_info(station) {\n        // Sync with server\n        var lat = station.location[0];\n        var lng = station.location[1];\n\n        var params = $.param({\n            i: enmodal.session_id,\n            lat: lat,\n            lng: lng\n        });\n        $.ajax({ url: \"lat_lng_info?\"+params,\n            async: ASYNC_OPTIONAL,\n            dataType: 'json',\n            success: function(data, status) {\n                check_server_error(data);\n                station.name = data.name;\n                if (\"locality\" in data) {\n                    station.locality = data.locality;\n                }\n                if (\"neighborhood\" in data) {\n                    station.neighborhood = data.neighborhood;\n                }\n                if (\"region\" in data) {\n                    station.region = data.region;\n                }\n                if (INC_UPDATES) {\n                    enmodal.transit_interface.sync_station_info(station);\n                }\n            }\n        });\n        \n    }\n\n    sync_station_info(station) {\n        var params = $.param({\n            i: enmodal.session_id,\n            service_id: this.active_service.sid,\n            station_id: station.sid,\n            name: station.name,\n            location: station.location[0].toString()+\",\"+station.location[1].toString(),\n            neighborhood: station.neighborhood\n        });\n        $.ajax({ url: \"station_update?\"+params,\n            async: ASYNC_REQUIRED,\n            dataType: 'json',\n            success: function(data, status) {\n                check_server_error(data);\n                enmodal.data.get_ridership();\n            }\n        });\n    }\n\n    add_stop_to_station(id) {\n\n        var station = this.active_service.get_station_by_id(id);\n\n        if (station === null) return;\n\n        var stop = new Stop(station);\n\n        this.active_line.add_stop(stop);\n        \n        var lines_to_draw = [this.active_line];\n        var best_edges = [];\n        var i, j, k;\n        var params;\n        var affected_station, station_lines;\n        \n        // If the line has more than 1 stop, we'll need to reconfigure edges\n        if (this.active_line.stops.length > 1) {\n            var delta = this.get_insertion_result(this.active_line, stop);\n            best_edges = delta.add;\n            var edges_to_remove = delta.remove;\n\n            for (i = 0; i < best_edges.length; i++) {\n                best_edges[i].sid = _id_factory.id();\n                for (j = 0; j < best_edges[i].stops.length; j++) {\n                    affected_station = best_edges[i].stops[j].station;\n                    station_lines = this.active_service.station_lines(affected_station);\n                    for (k = 0; k < station_lines.length; k++) {\n                        if (lines_to_draw.indexOf(station_lines[k]) == -1) {\n                            lines_to_draw.push(station_lines[k]);\n                        }\n                    }\n                }\n                this.active_line.add_edge(best_edges[i]);\n            }\n            for (i = 0; i < edges_to_remove.length; i++) {\n                for (j = 0; j < edges_to_remove[i].stops.length; j++) {\n                    affected_station = edges_to_remove[i].stops[j].station;\n                    station_lines = this.active_service.station_lines(affected_station);\n                    for (k = 0; k < station_lines.length; k++) {\n                        if (lines_to_draw.indexOf(station_lines[k]) == -1) {\n                            lines_to_draw.push(station_lines[k]);\n                        }\n                    }\n                }\n                this.active_line.remove_edge(edges_to_remove[i]);\n                if (INC_UPDATES) {\n                    params = $.param({\n                        i: enmodal.session_id,\n                        service_id: this.active_service.sid,\n                        line_id: this.active_line.sid,\n                        edge_id: edges_to_remove[i].sid\n                    });\n                    $.ajax({ url: \"edge_remove?\"+params,\n                        async: ASYNC_REQUIRED,\n                        dataType: 'json',\n                        success: check_server_error\n                    });\n                }\n            }\n        }\n        \n        \n        if (INC_UPDATES) {\n            params = $.param({\n                i: enmodal.session_id,\n                service_id: this.active_service.sid,\n                line_id: this.active_line.sid,\n                station_id: station.sid,\n                stop_id: stop.sid\n            });\n            $.ajax({ url: \"stop_add?\"+params,\n                async: ASYNC_REQUIRED,\n                dataType: 'json',\n                success: function(data, status) {\n                    for (var i = 0; i < best_edges.length; i++) {\n                        var params = $.param({\n                            i: enmodal.session_id,\n                            service_id: enmodal.transit_interface.active_service.sid,\n                            line_id: enmodal.transit_interface.active_line.sid,\n                            stop_1_id: best_edges[i].stops[0].sid,\n                            stop_2_id: best_edges[i].stops[1].sid,\n                            edge_id: best_edges[i].sid\n                        });\n                        $.ajax({ url: \"edge_add?\"+params,\n                            async: ASYNC_REQUIRED,\n                            dataType: 'json',\n                            success: check_server_error\n                        });\n                    }\n                }\n            });\n        }\n\n        \n        for (i = 0; i < this.station_markers.length; i++)  {\n            if (this.station_markers[i].station.sid == station.sid) {\n                this.station_markers[i].generate_popup();\n            }\n        }\n\n        for (i = 0; i < lines_to_draw.length; i++) {\n            this.draw_line(lines_to_draw[i], false, true, this.layers.active.line_paths, true, this.active_service);\n        }\n        \n        this.purge_station_pairs();\n        \n        enmodal.data.get_ridership();\n        enmodal.sidebar.update_line_diagram();\n\n        push_undo_buffer();\n\n    }\n\n    remove_station(id, force_closure) {\n\n        var impacted_lines = [];\n        var impacted_stops = [];\n\n        var i, j, k, l, m, n;\n        var line, edge, stop;\n        var params;\n\n        // Remove all stops that use this station.\n        for (i = 0; i < this.active_service.lines.length; i++) {\n            line = this.active_service.lines[i];\n            for (j = 0; j < line.stops.length; j++) {\n                stop = line.stops[j];\n                if (stop.station.sid == id) {\n                    // Found a match. Remove the stop\n                    impacted_stops.push(stop);\n                    line.stops.splice(j, 1);\n\n                    if (INC_UPDATES) {\n                        params = $.param({\n                            i: enmodal.session_id,\n                            service_id: this.active_service.sid,\n                            line_id: line.sid,\n                            stop_id: stop.sid\n                        });\n                        $.ajax({ url: \"stop_remove?\"+params,\n                            async: ASYNC_REQUIRED,\n                            dataType: 'json',\n                            success: check_server_error\n                        });\n                    }\n\n                    // Add to impacted lines.\n                    if (impacted_lines.indexOf(line) == -1) {\n                        impacted_lines.push(line);\n                    }\n\n                    // Shift the iterator back one.\n                    j -= 1;\n                }\n            }\n        }\n\n        // Remove all edges that use this station.\n\n        for (i = 0; i < impacted_lines.length; i++) {\n            line = impacted_lines[i];\n            var impacted_edges = [];\n            for (j = 0; j < line.edges.length; j++) {\n                edge = line.edges[j];\n                for (k = 0; k < impacted_stops.length; k++) {\n                    if (edge.has_stop(impacted_stops[k])) {\n                        impacted_edges.push(edge);\n                        // Add any impacted lines\n                        for (l = 0; l < edge.stops.length; l++) {\n                            var station_pairs = this.get_station_pairs(edge.stops[l].station);\n                            for (m = 0; m < station_pairs.length; m++) {\n                                var sp_line_lss = station_pairs[m][0].line_spline_segments;\n                                for (n = 0; n < sp_line_lss.length; n++) {\n                                    var sp_line = sp_line_lss[n].line;\n                                    if (impacted_lines.indexOf(sp_line) == -1) {\n                                        impacted_lines.push(sp_line);\n                                    }\n                                }\n                            }\n                        }\n                        line.remove_edge(edge);\n                        params = $.param({\n                            i: enmodal.session_id,\n                            service_id: this.active_service.sid,\n                            line_id: line.sid,\n                            edge_id: edge.sid\n                        });\n                        if (INC_UPDATES) {\n                            $.ajax({ url: \"edge_remove?\"+params,\n                                async: ASYNC_REQUIRED,\n                                dataType: 'json',\n                                success: check_server_error\n                            });\n                        }\n                        j -= 1;\n                    }\n                }\n            }\n\n            // Connect any gaps in the line\n            if (impacted_edges.length > 1) {\n                // Choose a random stop to connect the other edges to\n                var central_edge = impacted_edges[Math.floor(Math.random() * impacted_edges.length)];\n                var central_stop = central_edge.stops[0];\n                if (central_stop.station.sid == id) {\n                    central_stop = central_edge.stops[1];\n                }\n\n                // Add new edges\n                for (l = 0; l < impacted_edges.length; l++) {\n                    edge = impacted_edges[l];\n                    if (edge.sid != central_edge.sid) {\n                        var spoke_stop = edge.stops[0];\n                        if (spoke_stop.station.sid == id) {\n                            spoke_stop = edge.stops[1];\n                        }\n                        if (spoke_stop.sid != central_stop.sid) {\n                            if (!line.path_between_stops(spoke_stop, central_stop) || force_closure) {\n                                var new_edge = new Edge([central_stop, spoke_stop]);\n                                line.add_edge(new_edge);\n                                if (INC_UPDATES) {\n                                    params = $.param({\n                                        i: enmodal.session_id,\n                                        service_id: this.active_service.sid,\n                                        line_id: line.sid,\n                                        stop_1_id: new_edge.stops[0].sid,\n                                        stop_2_id: new_edge.stops[1].sid,\n                                        edge_id: new_edge.sid\n                                    });\n                                    $.ajax({ url: \"edge_add?\"+params,\n                                        async: ASYNC_REQUIRED,\n                                        dataType: 'json',\n                                        success: check_server_error\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Check for orphaned stops\n                for (l = 0; l < line.stops.length; l++) {\n                    stop = line.stops[l];\n                    var is_orphan = true;\n                    for (m = 0; m < line.edges.length; m++) {\n                        edge = line.edges[m];\n                        if (edge.has_stop(stop)) {\n                            is_orphan = false;\n                        }\n                    }\n                    if (is_orphan) {\n                        var delta = this.get_insertion_result(line, stop);\n                        var best_edges = delta.add;\n                        var edges_to_remove = delta.remove;\n\n                        for (m = 0; m < best_edges.length; m++) {\n                            best_edges[m].sid = NS_id.id();\n                            line.add_edge(best_edges[m]);\n                            if (INC_UPDATES) {\n                                params = $.param({\n                                    i: enmodal.session_id,\n                                    service_id: this.active_service.sid,\n                                    line_id: line.sid,\n                                    stop_1_id: best_edges[m].stops[0].sid,\n                                    stop_2_id: best_edges[m].stops[1].sid,\n                                    edge_id: best_edges[m].sid\n                                });\n                                $.ajax({ url: \"edge_add?\"+params,\n                                    async: ASYNC_REQUIRED,\n                                    dataType: 'json',\n                                    success: check_server_error\n                                });\n                            }\n                        }\n                        for (m = 0; m < edges_to_remove.length; m++) {\n                            line.remove_edge(edges_to_remove[m]);\n                            if (INC_UPDATES) {\n                                params = $.param({\n                                    i: enmodal.session_id,\n                                    service_id: this.active_service.sid,\n                                    line_id: line.sid,\n                                    edge_id: edges_to_remove[m].sid\n                                });\n                                $.ajax({ url: \"edge_remove?\"+params,\n                                    async: ASYNC_REQUIRED,\n                                    dataType: 'json',\n                                    success: check_server_error\n                                });\n                            }\n                        }\n                    }\n                }\n                \n                this.clean_edges(line);\n            }\n        }\n\n\n        // Remove this station.\n        for (i = 0; i < this.active_service.stations.length; i++) {\n            var station = this.active_service.stations[i];\n            if (station.sid == id) {\n                this.active_service.stations.splice(i, 1);\n                if (INC_UPDATES) {\n                    params = $.param({\n                        i: enmodal.session_id,\n                        service_id: this.active_service.sid,\n                        station_id: station.sid\n                    });\n                    $.ajax({ url: \"station_remove?\"+params,\n                        async: ASYNC_REQUIRED,\n                        dataType: 'json',\n                        success: check_server_error\n                    });\n                }\n        \n                // Remove transfers.\n                var removed = this.active_service.remove_transfers_for_station(station);\n                if (removed) {\n                    this.draw_transfers();\n                }\n            }\n        }\n\n        // Remove the station marker.\n        for (i = 0; i < this.station_markers.length; i++) {\n            var station_marker = this.station_markers[i];\n            if (station_marker.station.sid == id) {\n                this.layers.active.station_markers.removeLayer(station_marker.marker);\n                this.station_markers.splice(i, 1);\n            }\n        }\n        \n        // Remove all StationPairs that have this station.\n        \n        for (i = this.station_pairs.length - 1; i >= 0; i--) {\n            var station_pair = this.station_pairs[i];\n            if (station_pair.stations[0].sid == id || station_pair.stations[1].sid == id) {\n                this.station_pairs[i].undraw();\n                this.station_pairs.splice(i, 1);\n            }\n        }\n\n        // Redraw all impacted lines.\n        for (i = 0; i < impacted_lines.length; i++) {\n            this.draw_line(impacted_lines[i], false, true, this.layers.active.line_paths, true, this.active_service);\n        }\n        //this.layers.active.station_markers.bringToFront();\n\n        enmodal.data.get_ridership();\n        enmodal.sidebar.update_line_diagram();\n\n        push_undo_buffer();\n\n    }\n    \n    remove_line_from_station(station_id, line_id) {\n\n        var line = this.active_service.get_line_by_id(line_id);\n        var edge;\n        var stop;\n        var station = this.active_service.get_station_by_id(station_id);\n        var stops = line.get_stops_by_station(station);\n        var impacted_lines = this.active_service.station_lines(station);\n        var impacted_edges;\n\n        var i, j, k, l, m;\n        var params;\n\n        if (impacted_lines.length == 1) {\n            this.remove_station(station_id, false);\n            return 0;\n        }\n        \n        for (i = 0; i < stops.length; i++) {\n            stop = stops[i];\n            line.remove_stop(stop);\n            \n            if (INC_UPDATES) {\n                params = $.param({\n                    i: enmodal.session_id,\n                    service_id: this.active_service.sid,\n                    line_id: line.sid,\n                    stop_id: stop.sid\n                });\n                $.ajax({ url: \"stop_remove?\"+params,\n                    async: ASYNC_REQUIRED,\n                    dataType: 'json',\n                    success: check_server_error\n                });\n            }\n\n            // Remove all edges that use this station.\n\n            impacted_edges = [];\n            for (j = 0; j < line.edges.length; j++) {\n                edge = line.edges[j];\n                if (edge.has_stop(stop)) {\n                    impacted_edges.push(edge);\n                    line.remove_edge(edge);\n                    if (INC_UPDATES) {\n                        params = $.param({\n                            i: enmodal.session_id,\n                            service_id: this.active_service.sid,\n                            line_id: line.sid,\n                            edge_id: edge.sid\n                        });\n                        $.ajax({ url: \"edge_remove?\"+params,\n                            async: ASYNC_REQUIRED,\n                            dataType: 'json',\n                            success: check_server_error\n                        });\n                    }\n                    j -= 1;\n                }\n            }\n        }\n\n        // Connect any gaps in the line\n        if (impacted_edges.length > 1) {\n            // Choose a random stop to connect the other edges to\n            var central_edge = impacted_edges[Math.floor(Math.random() * impacted_edges.length)];\n            var central_stop = central_edge.stops[0];\n            // If we picked the stop we're removing... pick a different one.\n            if (central_stop.station.sid == station_id) {\n                central_stop = central_edge.stops[1];\n            }\n\n            // Add new edges\n            for (l = 0; l < impacted_edges.length; l++) {\n                edge = impacted_edges[l];\n                if (edge.sid != central_edge.sid) {\n                    var spoke_stop = edge.stops[0];\n                    if (spoke_stop.station.sid == station_id) {\n                        spoke_stop = edge.stops[1];\n                    } \n                    if (spoke_stop.sid != central_stop.sid) {\n                        var new_edge = new Edge([central_stop, spoke_stop]);\n                        line.add_edge(new_edge);\n                        if (INC_UPDATES) {\n                            params = $.param({\n                                i: enmodal.session_id,\n                                service_id: this.active_service.sid,\n                                line_id: line.sid,\n                                stop_1_id: new_edge.stops[0].sid,\n                                stop_2_id: new_edge.stops[1].sid,\n                                edge_id: new_edge.sid\n                            });\n                            $.ajax({ url: \"edge_add?\"+params,\n                                async: ASYNC_REQUIRED,\n                                dataType: 'json',\n                                success: check_server_error\n                            });\n                        }\n                    }\n                }\n            }\n\n            // Check for orphaned stops\n            for (l = 0; l < line.stops.length; l++) {\n                stop = line.stops[l];\n                var is_orphan = true;\n                for (m = 0; m < line.edges.length; m++) {\n                    edge = line.edges[m];\n                    if (edge.has_stop(stop)) {\n                        is_orphan = false;\n                    }\n                }\n                if (is_orphan) {\n                    var delta = this.get_insertion_result(line, stop);\n                    var best_edges = delta.add;\n                    var edges_to_remove = delta.remove;\n\n                    for (i = 0; i < best_edges.length; i++) {\n                        best_edges[i].sid = NS_id.id();\n                        line.add_edge(best_edges[i]);\n                        if (INC_UPDATES) {\n                            params = $.param({\n                                i: enmodal.session_id,\n                                service_id: this.active_service.sid,\n                                line_id: line.sid,\n                                stop_1_id: best_edges[i].stops[0].sid,\n                                stop_2_id: best_edges[i].stops[1].sid,\n                                edge_id: best_edges[i].sid\n                            });\n                            $.ajax({ url: \"edge_add?\"+params,\n                                async: ASYNC_REQUIRED,\n                                dataType: 'json',\n                                success: check_server_error\n                            });\n                        }\n                    }\n                    for (i = 0; i < edges_to_remove.length; i++) {\n                        line.remove_edge(edges_to_remove[i]);\n                        if (INC_UPDATES) {\n                            params = $.param({\n                                i: enmodal.session_id,\n                                service_id: this.active_service.sid,\n                                line_id: line.sid,\n                                edge_id: edges_to_remove[i].sid\n                            });\n                            $.ajax({ url: \"edge_remove?\"+params,\n                                async: ASYNC_REQUIRED,\n                                dataType: 'json',\n                                success: check_server_error\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Redraw all impacted lines.\n        for (i = 0; i < impacted_lines.length; i++) {\n            this.draw_line(impacted_lines[i], false, true, this.layers.active.line_paths, true, this.active_service);\n        }\n        // Refresh the marker\n        this.get_station_marker_by_station(station).generate_popup();\n\n        enmodal.data.get_ridership();\n        enmodal.sidebar.update_line_diagram();\n\n        push_undo_buffer();\n\n    }\n    \n    update_station_markers(line) {\n        for (var i = 0; i < line.stops.length; i++) {\n            var station = line.stops[i].station;\n            var station_marker = this.get_station_marker_by_station(station);\n            var num_colors = num_unique_colors(this.active_service.station_lines(station));\n            station_marker.set_radius(Math.max(num_colors, 2) * 2.5);\n        }\n    }\n    \n    has_station_pair(station_1, station_2) {\n        for (var i = 0; i < this.station_pairs.length; i++) {\n            var station_pair = this.station_pairs[i];\n            if (station_pair.stations[0] == station_1 && station_pair.stations[1] == station_2) {\n                return true;\n            }\n            if (station_pair.stations[0] == station_2 && station_pair.stations[1] == station_1) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    get_station_pair(station_1, station_2) {\n        for (var i = 0; i < this.station_pairs.length; i++) {\n            var station_pair = this.station_pairs[i];\n            if (station_pair.stations[0] == station_1 && station_pair.stations[1] == station_2) {\n                return [station_pair, 0];\n            }\n            if (station_pair.stations[0] == station_2 && station_pair.stations[1] == station_1) {\n                return [station_pair, 1];\n            }\n        }\n        return null;\n    }\n    \n    get_station_pair_by_sp_id(sp_id) {\n        for (var i = 0; i < this.station_pairs.length; i++) {\n            if (this.station_pairs[i].sid == sp_id) {\n                return this.station_pairs[i];\n            }\n        }\n        return null;\n    }\n    \n    get_station_pairs(station) {\n        var station_pairs = [];\n        for (var i = 0; i < this.station_pairs.length; i++) {\n            var station_pair = this.station_pairs[i];\n            if (station_pair.stations[0] == station) {\n                station_pairs.push([station_pair, 0]);\n            }\n            if (station_pair.stations[1] == station) {\n                station_pairs.push([station_pair, 1]);\n            }\n        }\n        return station_pairs;\n    }\n    \n    get_station_pairs_for_line(line) {\n        var station_pairs = [];\n        var station_drawmap = this.active_service.station_drawmap(line);\n        //console.log(station_drawmap);\n        for (var i = 0; i < station_drawmap.length; i++) {\n            var branch = station_drawmap[i];\n            // Convert branch to coordinates\n            for (var j = 0; j < branch.length - 1; j++) {\n                // Check for station pair.\n                var station_1 = branch[j];\n                var station_2 = branch[j+1];\n                if (this.has_station_pair(station_1, station_2)) {\n                    var spr = this.get_station_pair(station_1, station_2);\n                    var station_pair = spr[0];\n                    station_pairs.push(station_pair);\n                }\n            }\n        }\n        return station_pairs;\n    }\n\n    /**\n     * Draw a line.\n     * line : line to draw\n     * mm : true if this is being called from a mousemove event\n     * render : true if the station_pairs should actually be rendered (or just updated)\n     * layer : layer on which to draw\n     * active : true if the line is part of an active service\n     * service : service the line is part of\n     **/\n    draw_line(line, mm, render, layer, active, service) {\n        //console.log(\"draw line \"+line.name);\n        var i, j, k;\n        var station_1, station_2, station_pair, spr, station_pair_polarity;\n\n        var line_path;\n        if (line.sid in this.line_paths) {\n            line_path = this.line_paths[line.sid];\n        } else {\n            line_path = new LinePath();\n            this.line_paths[line.sid] = line_path;\n        }\n\n        // Remove existing edge paths.\n        for (i = 0; i < line_path.edge_paths.length; i++) {\n            this.layers.active.line_paths.removeLayer(line_path.edge_paths[i].path);\n        }\n        \n        // Clear all station pairs.\n        for (i = 0; i < this.station_pairs.length; i++) {\n            if (this.station_pairs[i].has_line(line)) {\n                this.station_pairs[i].clear_spline_segment_for_line(line);\n                //this.station_pairs[i].clear_spline_segments();\n                this.station_pairs[i].generate_paths(active);\n                //this.station_pairs[i].undraw(layer);\n                if (render) this.station_pairs[i].draw(layer);\n            }\n        }\n        \n        var station_pairs_to_draw = [];\n\n        if (line.stops.length > 1) {\n            //this.update_edge_paths(line);\n            //this.tweak_line_path(line);\n            var station_drawmap = service.station_drawmap(line);\n            //console.log(station_drawmap);\n            for (i = 0; i < station_drawmap.length; i++) {\n                var branch = station_drawmap[i];\n                var branch_coordinates = [];\n                var station_id_to_branch_coordinates = {};\n                // Convert branch to coordinates\n                var coordinate_index = 0;\n                for (j = 0; j < branch.length; j++) {\n                    // Push the station location.\n                    branch_coordinates.push({\"x\": branch[j].location[0], \"y\": branch[j].location[1]});\n                    if (!(branch[j].sid in station_id_to_branch_coordinates)) {\n                        station_id_to_branch_coordinates[branch[j].sid] = [coordinate_index];\n                    } else {\n                        station_id_to_branch_coordinates[branch[j].sid].push(coordinate_index);\n                    }\n                    coordinate_index += 1;\n                    if (j < branch.length - 1) {\n                        // Check for station pair.\n                        station_1 = branch[j];\n                        station_2 = branch[j+1];\n                        if (this.has_station_pair(station_1, station_2)) {\n                            spr = this.get_station_pair(station_1, station_2);\n                            station_pair = spr[0];\n                            // Push pins.\n                            var pins_to_push = [];\n                            for (k = 0; k < station_pair.pins.length; k++) {\n                                pins_to_push.push({\"x\": station_pair.pins[k].location[0], \"y\": station_pair.pins[k].location[1]});\n                                //branch_coordinates.push({\"x\": station_pair.pins[k].location[0], \"y\": station_pair.pins[k].location[1]});\n                                coordinate_index += 1;\n                            }\n                            if (spr[1]) {\n                                pins_to_push = pins_to_push.reverse();\n                            }\n                            branch_coordinates.push.apply(branch_coordinates, pins_to_push);\n                        }\n                    }\n                }\n                var spline = new BezierSpline({points: branch_coordinates, sharpness: BEZIER_SHARPNESS, duration: 2});\n                //console.log(spline);\n                \n                for (j = 0; j < branch.length - 1; j++) {\n                    station_1 = branch[j];\n                    station_2 = branch[j+1];\n                    \n                    if (this.has_station_pair(station_1, station_2)) {\n                        spr = this.get_station_pair(station_1, station_2);\n                        station_pair = spr[0];\n                        station_pair_polarity = spr[1];\n                    } else {\n                        station_pair = new StationPair(service, [station_1, station_2], this.layers.active.line_paths);\n                        this.station_pairs.push(station_pair);\n                        station_pair_polarity = 0;\n                    }\n                    var bci = station_id_to_branch_coordinates[station_1.sid][0];\n                    var bci_end = station_id_to_branch_coordinates[station_2.sid][0];\n                    \n                    var sss = [];\n                    for (k = 0; k < bci_end-bci; k++) {\n                        if (bci+k+1 <= spline.centers.length) {\n                            var centers = [];\n                            var controls = [];\n                            centers.push(new BezierCenter(branch_coordinates[bci+k].x, branch_coordinates[bci+k].y));\n                            if (station_pair_polarity === 0) {\n                                controls.push(new BezierControlPoint(spline.controls[bci+k][1].x, spline.controls[bci+k][1].y));\n                                controls.push(new BezierControlPoint(spline.controls[bci+k+1][0].x, spline.controls[bci+k+1][0].y));\n                            } else {\n                                controls.push(new BezierControlPoint(spline.controls[bci+k][1].x, spline.controls[bci+k][1].y));\n                                controls.push(new BezierControlPoint(spline.controls[bci+k+1][0].x, spline.controls[bci+k+1][0].y));\n                            }\n                            centers.push(new BezierCenter(branch_coordinates[bci+k+1].x, branch_coordinates[bci+k+1].y));\n                            if (station_pair_polarity == 1) {\n                                centers = centers.reverse();\n                                controls = controls.reverse();\n                            }\n                            var ss = new SplineSegment(controls, centers);\n                            sss.push(ss);\n                        }\n                        \n                    }\n                    if (station_pair_polarity == 1) {\n                        sss = sss.reverse();\n                    }\n                    var lss = new LineSplineSegment(line, sss, station_pair_polarity);\n                    station_pair.add_line_spline_segment(lss);\n                    \n                    station_pair.generate_paths(active);\n                    station_pairs_to_draw.push(station_pair);\n                    \n                    // Remove start index from station_id map\n                    station_id_to_branch_coordinates[station_1.sid].splice(0, 1);\n                    \n                    // Draw now, for debug only\n                    //station_pair.draw();\n                }\n            }\n            \n            this.update_station_markers(line);\n        }\n        if (render) {\n            // Draw new station pairs.\n            for (i = 0; i < station_pairs_to_draw.length; i++) {\n                station_pairs_to_draw[i].draw(layer);\n                if (mm) station_pairs_to_draw[i].draw_pins(layer);\n            }\n        }\n    }\n    \n    draw_transfers() {\n        this.layers.active.transfers.clearLayers();\n        for (var i = 0; i < enmodal.transit_interface.active_service.transfers.length; i++) {\n            this.draw_transfer(enmodal.transit_interface.active_service.transfers[i]);\n        }\n    }\n    \n    draw_transfer(transfer) {\n        var station_1 = transfer.stations[0];\n        var station_2 = transfer.stations[1];\n        var options = {weight: TRANSFER_WIDTH, color: 'black', opacity: 1.0};\n        if (station_distance(station_1, station_2) > MAX_TRANSFER_DISTANCE_MILES) {\n            options.dashArray = '10,10';\n            options.opacity = TRANSFER_PREVIEW_OPACITY;\n        }\n        var path = L.polyline([L.latLng(station_1.location), L.latLng(station_2.location)], options);\n        this.layers.active.transfers.addLayer(path);\n    }\n    \n    draw_transfers_for_station(station) {\n        this.transfer_layer.clearLayers();\n        for (var i = 0; i < enmodal.transit_interface.active_service.transfers.length; i++) {\n            if (enmodal.transit_interface.active_service.transfers[i].has_station(station)) {\n                this.draw_transfer(enmodal.transit_interface.active_service.transfers[i]);\n            }\n        }\n        // Bring station layer to front.\n        //this.layers.active.station_markers.bringToFront();\n    }\n    \n    purge_bad_transfers() {\n        var removed = this.active_service.remove_transfers_above_length(MAX_TRANSFER_DISTANCE_MILES);\n        if (removed > 0) {\n            this.draw_transfers();\n        }\n    }\n    \n    purge_station_pairs() {\n        for (var i = this.station_pairs.length - 1; i >= 0; i--) {\n            var station_pair = this.station_pairs[i];\n            if (this.active_service.get_station_by_id(station_pair.stations[0].sid) === null || \n                this.active_service.get_station_by_id(station_pair.stations[1].sid) === null ||\n                this.active_service.has_edge_for_stations(station_pair.stations[0], station_pair.stations[1]) === false ||\n                station_pair.lines().length === 0) {\n                station_pair.undraw_pins();\n                this.station_pairs.splice(i,1);\n            }\n        }\n    }\n    \n    /**\n     * Traverses the entire map and tries to align station_pairs so that offsets are consistent\n     **/\n    direct_station_pairs() {\n        var marked_ids = [];\n    }\n    \n    regenerate_edge_path(line, edge_path) {\n        var line_path = this.line_paths[line.sid];\n        this.layers.active.line_paths.removeLayer(edge_path.path);\n        edge_path.regenerate_path();\n        this.layers.active.line_paths.addLayer(edge_path.path);\n    }\n\n    refresh_edge_paths(line) {\n        //console.log(\"refresh edge paths for line \"+line.name);\n        var line_path = this.line_paths[line.sid];\n        // Remove existing edge paths.\n        for (var i = 0; i < line_path.edge_paths.length; i++) {\n            this.layers.active.line_paths.removeLayer(line_path.edge_paths[i].path);\n        }\n\n        // Draw new edge paths.\n        for (var j = 0; j < line_path.edge_paths.length; j++) {\n            line_path.edge_paths[j].regenerate_path();\n            var path = line_path.edge_paths[j].path;\n            this.layers.active.line_paths.addLayer(path);\n        }\n        // Bring station layer to front.\n        //this.layers.active.station_markers.bringToFront();\n    }\n    \n    pin_projection(lat, lng) {\n        var m_px = this.map.latLngToLayerPoint(L.latLng(lat, lng));\n        var best_p = null;\n        var best_distance = -1;\n        var best_station_pair = null;\n        var best_sid = -1;\n        var sids_for_showing_pins = [];\n        var p, p_px, d, l;\n        for (var j = 0; j < this.station_pairs.length; j++) {\n            var station_pair = this.station_pairs[j];\n            if (station_pair.service == this.active_service) {\n                p = station_pair.project_pin(lat, lng);\n                if (p !== null) {\n                    if (best_p === null || p.d < best_distance) {\n                        best_p = p;\n                        best_distance = p.d;\n                        best_sid = station_pair.sid;\n                        best_station_pair = station_pair;\n                    }\n                    d = m_px.distanceTo(this.map.latLngToLayerPoint(L.latLng(p.x, p.y)));\n                    if (d < PIN_DISTANCE_TO_SHOW_PINS) {\n                        sids_for_showing_pins.push(station_pair.sid);\n                    }\n                    \n                    if (DEBUG_PIN_PROJECTIONS) {\n                        var weight = 1;\n                        if (d < PIN_DISTANCE_TO_SHOW_PINS) weight = 2;\n                        l = L.polyline([L.latLng([p.x, p.y]), L.latLng(lat, lng)], {weight: weight, color: '#00f'});\n                        this.layers.preview.addLayer(l);\n                    }\n                }\n            }\n        }\n            \n        var show_pin_icon = false;\n        if (best_p !== null) {\n            // Convert best_p distance to pixels\n            m_px = this.map.latLngToLayerPoint(L.latLng(lat, lng));\n            p_px = this.map.latLngToLayerPoint(L.latLng(best_p.x, best_p.y));\n            d = m_px.distanceTo(p_px);\n            show_pin_icon = d < PIN_DISTANCE_MIN;\n        }\n        if (DEBUG_PIN_PROJECTIONS && best_p !== null) {\n            l = L.polyline([L.latLng([best_p.x, best_p.y]), L.latLng(lat, lng)], {weight: 1, color: '#f00'});\n            this.layers.preview.addLayer(l);\n        }\n        if (show_pin_icon) {\n            var nearest_pin_distance = best_station_pair.distance_to_nearest_pin(lat, lng);\n            //console.log(nearest_pin_distance);\n            if (nearest_pin_distance > -1 && nearest_pin_distance < PIN_DISTANCE_FROM_EXISTING_PIN_MIN) show_pin_icon = false;\n        }\n        return [show_pin_icon, best_p, best_sid, sids_for_showing_pins];\n    }\n\n    preview_line(line, lat, lng) {\n        this.preview_clear();\n\n        var i, j;\n        var station;\n        \n        // Find nearest station?\n\n        // Find the nearest station\n        var m_px = this.map.latLngToLayerPoint(L.latLng(lat, lng));\n        var best_distance = 0;\n        var best_station = null;\n        for (i = 0; i < enmodal.transit_interface.active_service.stations.length; i++) {\n            station = enmodal.transit_interface.active_service.stations[i];\n            var distance = m_px.distanceTo(this.map.latLngToLayerPoint(L.latLng(station.location[0], station.location[1])));\n\n            if (best_distance > distance || best_station === null) {\n                best_station = station;\n                best_distance = distance;\n            }\n        }\n        \n        // Project onto curve?\n        var pin_projection = this.pin_projection(lat, lng);\n        //console.log(pin_projection);\n        \n        if (!this.dragging_pin) {\n            if (pin_projection[0] && best_distance > PIN_DISTANCE_FROM_STATION_MIN) {\n                var m = L.marker([pin_projection[1].x, pin_projection[1].y], {icon: PIN_ICON});\n                m.id = \"pin-preview\";\n                this.preview_line_pin_marker = m;\n                this.layers.preview.addLayer(m);\n            } else {\n                // Create dummy station and stop\n                station = new Station(\"preview\", [lat, lng], true);\n                var stop = new Stop(station, true);\n\n                // Get the EdgeDelta from this new stop\n                var delta = this.get_insertion_result(line, stop);\n\n                // Draw the edge path\n                for (j = 0; j < delta.add.length; j++) {\n                    var edge = delta.add[j];\n\n                    var stop_points = [[edge.stops[0].station.location[0], edge.stops[0].station.location[1]], [edge.stops[1].station.location[0], edge.stops[1].station.location[1]]];\n                    var edge_path = new EdgePath(edge.sid, stop_points, [], [], line.color_bg, 0.2);\n\n                    this.preview_paths.push(edge_path);\n                    this.layers.preview.addLayer(edge_path.path);\n                }\n            }\n        }\n        \n        // Show pins for station pairs\n        //var station_pairs = this.get_station_pairs_for_line(line);\n        for (j = 0; j < this.station_pairs.length; j++) {\n            var station_pair = this.station_pairs[j];\n            if (pin_projection[3].indexOf(station_pair.sid) > -1) {\n                station_pair.draw_pins();\n            } else {\n                station_pair.undraw_pins();\n            }\n        }\n    }\n    \n    preview_transfer(lat, lng) {\n        this.preview_clear();\n        var station_loc = {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [this.active_transfer_station.location[1], this.active_transfer_station.location[0]]\n            }\n        };\n        var mouse_loc = {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [lng, lat]\n            }\n        };\n        var station_mouse_line = {\n            \"type\": \"Feature\",\n            \"properties\": {},\n            \"geometry\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [[this.active_transfer_station.location[1], this.active_transfer_station.location[0]], [lng, lat]]\n            }\n        };\n        \n        var chunk = turf.lineChunk(station_mouse_line, MAX_TRANSFER_DISTANCE_MILES, 'miles');\n\n        var distance = turf.distance(station_loc, mouse_loc, \"miles\");\n\n        var path = L.polyline([L.latLng(chunk.features[0].geometry.coordinates[1][1], chunk.features[0].geometry.coordinates[1][0]), L.latLng(this.active_transfer_station.location[0], this.active_transfer_station.location[1])], {weight: TRANSFER_WIDTH, color: 'black', opacity: TRANSFER_PREVIEW_OPACITY});\n        this.layers.preview.addLayer(path);\n        // Bring station layer to front.\n        //this.layers.active.station_markers.bringToFront();\n    }\n\n    preview_clear() {\n        // Remove existing preview paths.\n        this.layers.preview.clearLayers();\n\n        // Clear preview paths array.\n        this.preview_paths = [];\n    }\n\n    preview_handler(e) {\n        if (this.preview_paths_enabled) {\n            if (this.active_tool == \"station\") {\n                if (this.active_line !== null) {\n                    this.preview_line(this.active_line, e.latlng.lat, e.latlng.lng);\n                }\n            }\n            if (this.active_tool == \"transfer\") {\n                this.preview_transfer(e.latlng.lat, e.latlng.lng);\n            }\n        }\n    }\n    \n    draw_bezier_rep_for_station(station) {\n        var station_pairs = this.get_station_pairs(station);\n        for (var i = 0; i < station_pairs.length; i++) {\n            var polyline_latlngs = [];\n            if (station_pairs[i][0].stations[0].sid == station.sid) {\n                polyline_latlngs.push(station_pairs[i][0].markers()[0].marker.getLatLng());\n            }\n            if (station_pairs[i][0].stations[1].sid == station.sid) {\n                polyline_latlngs.push(station_pairs[i][0].markers()[1].marker.getLatLng());\n            }\n            polyline_latlngs.push(L.latLng(station.location[0], station.location[1]));\n            this.bezier_layer.addLayer(L.polyline(polyline_latlngs, {color: '#A77', weight: 1, dashArray: '4,4'}));\n        }\n    }\n    \n    draw_bezier_rep(station_pair, cutoff, locus, use_locus) {\n        var polyline_latlngs = [];\n        var dir = 1;\n        if (station_pair.stations[0].sid == locus.sid || !use_locus) {\n            polyline_latlngs.push(L.latLng(station_pair.stations[0].location[0], station_pair.stations[0].location[1]));\n            dir = 0;\n        }\n        var best_pair_markers = station_pair.markers();\n        for (var i = 0; i < Math.min(cutoff, best_pair_markers.length); i++) {\n            if (dir == 1) {\n                polyline_latlngs.push(best_pair_markers[best_pair_markers.length - i - 1].marker.getLatLng());\n            } else {\n                polyline_latlngs.push(best_pair_markers[i].marker.getLatLng());\n            }\n        }\n        if (cutoff >= best_pair_markers.length || !use_locus) {\n            if (station_pair.stations[1].sid == locus.sid) {\n                polyline_latlngs.push(L.latLng(station_pair.stations[1].location[0], station_pair.stations[1].location[1]));\n            }\n        }\n        this.bezier_layer.addLayer(L.polyline(polyline_latlngs, {color: 'red', weight: 1, dashArray: '2,2'}));\n    }\n    \n    settings() {\n        var station_pair_json = this.station_pairs;\n        return {\"station_pairs\": station_pair_json};\n    }\n}\n\nfunction sortNumber(a,b) {\n    return a - b;\n}\n\nclass LineDelta {\n\n    constructor(add, remove) {\n        this.add = add;\n        this.remove = remove;\n    }\n\n}\n\nfunction push_undo_buffer() {\n    if (_undo_index < _undo_buffer.length - 1) {\n        _undo_buffer.splice(_undo_index, _undo_buffer.length - _undo_index - 1);\n    }\n    if (_undo_buffer.length == UNDO_BUFFER_SIZE) {\n        _undo_buffer.splice(0, 1);\n    }\n\n    var map_json = enmodal.transit_map.to_json();\n    var m = JSON.parse(map_json);\n    m.settings = enmodal.transit_interface.settings();\n\n    var j = JSON.stringify(m);\n\n    _undo_buffer.push(j);\n    _undo_index = _undo_buffer.length - 1;\n}\n\nfunction undo() {\n    if (_undo_index === null) {\n        _undo_index = _undo_buffer.length;\n    }\n    if (_undo_index <= 0) return;\n\n    _undo_index -= 1;\n\n    var j = _undo_buffer[_undo_index];\n\n    var jdata = JSON.parse(j);\n    handle_map_data(jdata);\n}\n\nfunction redo() {\n    if (_undo_index === null) return;\n    if (_undo_index >=  _undo_buffer.length - 1) return;\n\n    _undo_index += 1;\n\n    var j = _undo_buffer[_undo_index];\n\n    var jdata = JSON.parse(j);\n    handle_map_data(jdata);\n}\n\nfunction check_server_error(data) {\n    if (\"error\" in data) {\n        console.log(data.error);\n        if (data.error == \"Invalid session\") {\n            app.modal = 'session-expired';\n            setTimeout(function() {\n                location.reload();\n            }, 5000);\n        }\n    }\n}\n\nfunction delete_station_event(e) {\n    var station_id = parseInt($(this).attr('transit-station-id'));\n    enmodal.transit_interface.remove_station(station_id, false);\n}\n\nfunction transfer_station_event(e) {\n    var station_id = $(this).attr('id').replace('transfer-', '');\n    enmodal.transit_interface.active_transfer_station = enmodal.transit_interface.active_service.get_station_by_id(station_id);\n    enmodal.transit_interface.active_tool = \"transfer\";\n}\n\nfunction build_to_station_event(e) {\n    var station_id = $(this).attr('id');\n    enmodal.transit_interface.add_stop_to_station(station_id);\n}","class StationMarker {\n\n    constructor(station, active) {\n        this.station = station;\n        this.active = active;\n        this.tooltip_options = {direction: 'top', offset: L.point(0, -5), className: 'station-marker-tooltip'};\n        this.marker = this.generate_marker();\n        this.popup = L.popup({'className': 'station-popup'});\n        this.merge_pending = false;\n        this.marker.bindPopup(this.popup);\n        this.radius = MARKER_RADIUS_DEFAULT;\n        this.generate_popup();\n    }\n\n    generate_marker() {\n        var latlng = L.latLng(this.station.location[0], this.station.location[1]);\n        var opacity = 1.0;\n        if (!this.active) opacity = INACTIVE_OPACITY;\n        //var marker = L.circleMarker(latlng, {draggable: true, color: \"black\", opacity: opacity, fillColor: \"white\", fillOpacity: opacity, zIndexOffset: 100, pane: \"stationMarkerPane\"}).bindTooltip(this.station.name, this.tooltip_options);\n        var marker = L.circleMarker(latlng, {draggable: true, color: \"black\", opacity: opacity, fillColor: \"white\", fillOpacity: opacity, zIndexOffset: 100, pane: \"stationMarkerPane\"}).setRadius(this.radius).bindTooltip(this.station.name, this.tooltip_options);\n        if (this.active) {\n            marker.on('click', function(event) {\n                if (enmodal.transit_interface.active_tool == \"transfer\") {\n                    marker.unbindPopup();\n                    var station = enmodal.transit_interface.get_station_marker_by_marker(marker).station;\n                    if (station != enmodal.transit_interface.active_transfer_station) {\n                        var station_loc = {\n                            \"type\": \"Feature\",\n                            \"properties\": {},\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [station.location[1], station.location[0]]\n                            }\n                        };\n                        var transfer_loc = {\n                            \"type\": \"Feature\",\n                            \"properties\": {},\n                            \"geometry\": {\n                                \"type\": \"Point\",\n                                \"coordinates\": [enmodal.transit_interface.active_transfer_station.location[1], enmodal.transit_interface.active_transfer_station.location[0]]\n                            }\n                        };\n\n                        var distance = turf.distance(station_loc, transfer_loc, \"miles\");\n                        if (distance <= MAX_TRANSFER_DISTANCE_MILES) {\n                            // Create the transfer\n                            enmodal.transit_interface.active_service.add_transfer(station, enmodal.transit_interface.active_transfer_station);\n                            enmodal.transit_interface.draw_transfers();\n                        }\n                        enmodal.transit_interface.active_tool = \"station\";\n                        enmodal.transit_interface.preview_clear();\n                    }\n                }\n            });\n        }\n        return marker;\n    }\n    \n    set_radius(r) {\n        this.radius = r;\n        this.marker.setRadius(r);\n    }\n    \n    show_merge() {\n        this.marker.setRadius(this.radius + MARKER_MERGE_DELTA);\n        this.merge_pending = true;\n    }\n    \n    clear_merge() {\n        if (this.merge_pending) {\n            this.marker.setRadius(this.radius);\n            this.merge_pending = false;\n        }\n    }\n\n    generate_popup() {\n        var content = '<div class=\"station-name\" id=\"station-'+this.station.sid.toString()+'\" data-balloon=\"Click to rename\" data-balloon-pos=\"left\">'+this.station.name;\n        content += '   <i class=\"fa fa-pencil\" style=\"margin-left: 5px;\" aria-hidden=\"true\"></i>';\n        content += '</div>';\n        /*\n        content += '<div class=\"station-content\"><div class=\"station-info\">'+this.station.neighborhood+'<br />';\n        content += '<i class=\"fa fa-user\" aria-hidden=\"true\"></i> <span id=\"stationriders-'+this.station.sid.toString()+'\">';\n        if (this.station.ridership == -1) {\n            content += '...';\n        } else {\n            content += Math.round(this.station.ridership).toString();\n        }\n        content += '</span></div>';\n        */\n        content += '<div class=\"station-info subway-lines\">';\n\n        var lines = enmodal.transit_interface.active_service.station_lines(this.station);\n        var active_line_is_different = true;\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            content += '<div transit-station-id=\"'+this.station.sid.toString()+'\" transit-line-id=\"'+line.sid.toString()+'\" class=\"subway-line-long subway-deletable station-popup-line-marker\" style=\"background-color: '+line.color_bg+'; color: '+line.color_fg+';\" data-balloon=\"Remove\" data-balloon-pos=\"down\"><div class=\"content\">'+line.name+'</div></div>';\n            if (line.sid == enmodal.transit_interface.active_line.sid) {\n                active_line_is_different = false;\n            }\n        }\n        if (enmodal.transit_interface.active_line === null) active_line_is_different = false;\n        content += ' </div>';\n\n        if (active_line_is_different) {\n            content += '<div class=\"station-content-button station-build line-'+enmodal.transit_interface.active_line.sid.toString()+'\" id=\"'+this.station.sid.toString()+'\">Build <div class=\"subway-line-long subway-line-mini\" style=\"background-color: '+enmodal.transit_interface.active_line.color_bg+'; color: '+enmodal.transit_interface.active_line.color_fg+';\"><div class=\"content\">'+enmodal.transit_interface.active_line.name+'</div></div></div>';\n        }\n\n        content += '<div class=\"station-content-button station-delete\" transit-station-id=\"'+this.station.sid.toString()+'\">Delete</div>';\n        content += '<div class=\"station-buttons\"><div class=\"station-content-button station-transfer\" id=\"transfer-'+this.station.sid.toString()+'\">Transfer</div>';\n        content += '</div><div style=\"clear: both;\"></div>';\n        content += '</div>';\n\n        this.popup.setContent(content);\n        this.popup.update();\n        this.marker.bindPopup(this.popup);\n    }\n    \n    update_tooltip() {\n        //this.marker.unbindTooltip();\n        //this.marker.bindTooltip(this.station.name, this.tooltip_options);\n        this.marker.setTooltipContent(this.station.name);\n    }\n\n}","function session_new() {\n    // Initialize server\n    $.ajax({ url: \"session\",\n        async: false,\n        dataType: 'json',\n        success: function(data, status) {\n            enmodal.public_key = data.public_key;\n            enmodal.session_id = data.private_key;\n            window.history.pushState(\"\", \"\", \"?id=\"+enmodal.session_id);\n            enmodal.sharing.update(data.public_key, data.private_key);\n        }\n    });\n        \n    // Initialize service\n    var service = new Service(\"MTA\");\n    service.mode = \"heavy_rail\";\n    enmodal.transit_map.add_service(service);\n    enmodal.transit_interface.active_service = service;\n    enmodal.sidebar.update_service_selector(enmodal.transit_interface.active_service.sid);\n    enmodal.sidebar.refresh_service_editor();\n    var params = $.param({\n        i: enmodal.session_id,\n        service_id: service.sid,\n        name: service.name\n    });\n    $.ajax({ url: \"service_add?\"+params,\n        async: false,\n        dataType: 'json',\n        success: function(data, status) {\n        }\n    });\n}\n\nfunction handle_map_data(jdata) {\n    console.log(jdata);\n    \n    enmodal.transit_interface.station_pairs = [];\n\n    enmodal.transit_map.sid = jdata.sid;\n    enmodal.transit_map.from_json(jdata);\n    \n    if (enmodal.transit_map.services.length === 0) {\n        session_new();\n    } else {\n\n        enmodal.transit_interface.active_service = enmodal.transit_map.primary_service();\n        enmodal.transit_interface.active_line = enmodal.transit_map.primary_service().lines[0];\n        enmodal.sidebar.update_service_selector(enmodal.transit_interface.active_service.sid, true);\n        enmodal.sidebar.refresh_service_editor();\n        enmodal.sidebar.update_line_selector(enmodal.transit_interface.active_line.sid);\n        enmodal.sidebar.update_line_editor();\n        enmodal.sidebar.refresh_line_editor();\n        enmodal.sidebar.update_line_diagram();\n        \n        // Updating service selector is enough to draw the service.\n        //enmodal.transit_interface.draw_service(enmodal.transit_interface.active_service, enmodal.transit_interface.layers.active, true, true);\n\n        // use user settings where appropriate\n        var user_settings = jdata.settings;\n        for (var i = 0; i < user_settings.station_pairs.length; i++) {\n            var sp = user_settings.station_pairs[i];\n            var station_1 = enmodal.transit_map.get_station_by_id(sp.station_ids[0]);\n            var station_2 = enmodal.transit_map.get_station_by_id(sp.station_ids[1]);\n            var sp_real = enmodal.transit_interface.get_station_pair(station_1, station_2);\n            if (sp_real !== null) {\n                for (var j = 0; j < sp.pins.length; j++) {\n                    sp_real[0].add_pin(sp.pins[j].location[0], sp.pins[j].location[1]);\n                }\n            }\n        }\n        \n        enmodal.transit_interface.draw_transfers();\n        //enmodal.transit_interface.map.closePopup();\n        var bounds = enmodal.transit_map.geographic_bounds();\n        if (bounds !== null) enmodal.leaflet_map.fitBounds(bounds);\n        enmodal.data.get_ridership();\n    }\n}\n\nfunction session_load() {\n    // Initialize session and map\n    var params = $.param({\n        i: enmodal.session_id\n    });\n    $.ajax({ url: \"session_load?\"+params,\n        async: false,\n        success: function(data, status) {\n            \n            //console.log(data);\n            var j = JSON.parse(data);\n            //console.log(j);\n            if (j.error !== undefined) {\n                session_new();\n            } else {\n                var jdata = JSON.parse(j.data);\n                handle_map_data(jdata);\n                \n                window.history.pushState(\"\", \"\", \"?id=\"+enmodal.session_id);\n                enmodal.public_key = j.public_key;\n                enmodal.session_id = j.private_key;\n                if (j.title !== null) {\n                    $(\"#map-title-inner\").html(j.title + '  <i class=\"fa fa-pencil\" style=\"margin-left: 5px;\" aria-hidden=\"true\"></i>');\n                    enmodal.map_name = j.title;\n                }\n                \n                $(\"#starter-city-picker\").hide();\n                $(\"#starter\").hide();\n                $(\"#options\").show();\n            }\n        }\n    });\n\n}\n\nfunction session_save() {\n    var params = $.param({\n        i: enmodal.session_id\n    });\n    $(\"#tool-save\").html('<i class=\"fa fa-spinner fa-spin fa-1x fa-fw\"></i>');\n    $.ajax({ url: \"session_push?\"+params,\n        async: true,\n        type: \"POST\",\n        data: LZString.compressToBase64(session_json()),\n        dataType: 'text',\n        success: function(data, status) {\n            var params = $.param({\n                i: enmodal.session_id\n            });\n            $.ajax({ url: \"session_save?\"+params,\n                async: true,\n                dataType: 'json',\n                success: function(data, status) {\n                    if (data.result == \"OK\") {\n                        $(\"#tool-save\").html('Save');\n                        $(\"#tool-save\").attr('data-balloon', 'Saved!');\n                        $(\"#tool-save\").attr('data-balloon-visible','');\n                        setTimeout(function() {\n                            $(\"#tool-save\").removeAttr('data-balloon');\n                            $(\"#tool-save\").removeAttr('data-balloon-visible');\n                        }, 3000);\n                    } else if (data.message == \"Anonymous user\") {\n                        $(\"#tool-save\").html('Save');\n                        $(\"#tool-save\").attr('data-balloon', 'You must be logged in to save.');\n                        $(\"#tool-save\").attr('data-balloon-visible','');\n                        setTimeout(function() {\n                            $(\"#tool-save\").removeAttr('data-balloon');\n                            $(\"#tool-save\").removeAttr('data-balloon-visible');\n                        }, 3000);\n                    } else {\n                        $(\"#tool-save\").html('Save');\n                        $(\"#tool-save\").attr('data-balloon', 'Error saving. Please try again later.');\n                        $(\"#tool-save\").attr('data-balloon-visible','');\n                        setTimeout(function() {\n                            $(\"#tool-save\").removeAttr('data-balloon');\n                            $(\"#tool-save\").removeAttr('data-balloon-visible');\n                        }, 3000);\n                    }\n                }\n            });\n        }\n    });\n}\n\nfunction session_json() {\n    var ret = {\n        \"map\": enmodal.transit_map,\n        \"settings\": enmodal.transit_interface.settings()\n    };\n    return JSON.stringify(ret);\n}","// Game version\nvar GAME_VERSION = 0.13;\n\n// Send incremental updates to server?\nvar INC_UPDATES = true;\n\n// Used to set async parameter for all server requests.\nvar ASYNC_REQUIRED = true;\nvar ASYNC_OPTIONAL = false;\n\n// Drawing parameters\nvar CURVE_THRESHOLD = 0.005; // Max overshoot from curve momentum.\nvar MARKER_RADIUS_DEFAULT = 4.0;\nvar MARKER_RADIUS_LARGE = 8.0;\nvar MARKER_RADIUS_HUGE = 12.0;\nvar MARKER_MERGE_DELTA = 4.0;\nvar STATION_MARKER_LARGE_THRESHOLD = 3; // Number of groups needed to force a large station marker\nvar STATION_MARKER_HUGE_THRESHOLD = 4;\nvar STATION_MARKER_SCALE_THRESHOLD = 6;\nvar TRACK_WIDTH = 4.0;\nvar TRACK_OFFSET = 4.0;\nvar TRANSFER_WIDTH = 3.0;\nvar TRANSFER_PREVIEW_OPACITY = 0.75;\nvar MAX_TRANSFER_DISTANCE_MILES = 0.25;\n\nvar USE_CURVED_TRACKS = true;\nvar CURVE_OVERSHOOT = 0.5;\nvar BEZIER_SHARPNESS = 0.4;\n\nvar DGGRID_AREA = 0.0733633;\nvar MAX_ZOOM = 16;\nvar MIN_ZOOM = 6;\nvar START_ZOOM = 13;\n\nvar MIN_ZOOM_FOR_HEXAGONS = 13;\n\nvar DEBUG_MODE = false;\n\n// Map rendering parameters\nvar SHARED_STRETCH_THRESHOLD = 8; // Max number of \"local\" stations in a shared stretch.\n\nvar TRANSFER_BUTTON_DEFAULT = \"Start Transfer\";\nvar TRANSFER_BUTTON_START = \"Click a station\";\nvar TRANSFER_BUTTON_END = \"Click another station\";\n\n// Instructions for calculate_ridership function\nvar RIDERSHIP_ADD = 0;\nvar RIDERSHIP_NOCHANGE = 1;\nvar RIDERSHIP_DELETE = 2;\n\n// Custom lines\nvar CUSTOM_LINE_FIRST_INDEX = 97;\n\nvar FOLLOW_STREET_MOVE_THRESH = 500;\n\nvar PIN_DISTANCE_MIN = 16;\nvar PIN_DISTANCE_FROM_STATION_MIN = 8;\nvar PIN_DISTANCE_TO_SHOW_PINS = 100;\nvar PIN_DISTANCE_FROM_EXISTING_PIN_MIN = 40;\n\nvar INACTIVE_OPACITY = 0.25;\n\nvar BEZIER_LUT_STEPS = 100;\n\nvar STATION_MERGE_THRESHOLD = 8;\nvar ALLOW_STATION_MERGING = true;\nvar SERVICE_MODES_ENABLED = false;\n\nvar PIN_ICON = L.icon({\n    iconUrl: 'src/img/pin.png',\n    iconSize: [30, 25],\n    iconAnchor: [15, 25]\n});\n\nvar DEFAULT_LINE_BG = \"#808183\";\nvar DEFAULT_LINE_FG = \"#FFF\";\n\nHEXAGON_SCALES = {\n    \"population\": chroma.scale('YlGnBu').domain([1,0]),\n    \"employment\": chroma.scale('YlOrRd').domain([1,0])\n};\nHEXAGON_UNITS = {\n    \"population\": \"persons / mile<sup>2</sup>\",\n    \"employment\": \"jobs /  mile<sup>2</sup>\"\n};\n\nvar DEBUG_BEZIER_CONTROLS = false;\nvar DEBUG_PIN_PROJECTIONS = false;\n\nvar GTFS_ENABLED = true;\n\nvar UNDO_BUFFER_SIZE = 20;","class Sharing {\n    constructor() {\n    }\n    \n    update(public_key, private_key) {\n        console.log(location.origin);\n        $(\"#share-link-public input\").val(location.origin+\"/?id=\"+public_key);\n        $(\"#share-link-private input\").val(location.origin+\"/?id=\"+private_key);\n    }\n}","class Sidebar {\n    constructor() {\n        \n    }\n    \n    add_to_line_selector(line) {\n        // Add a line to the line selector dropdown.\n        $(\"#dropdown-line-menu\").prepend(\"<li class=\\\"line-selector-item\\\"><a class=\\\"line-selector-option\\\" transit-line-id=\\\"\"+line.sid.toString()+\"\\\" href=\\\"#\\\"> <div class=\\\"subway-line-long\\\" style=\\\"background-color: \"+line.color_bg+\"; color: \"+line.color_fg+\";\\\"><div class=\\\"content\\\">\"+line.name+\"</div></div> \"+line.full_name+\"</a></li>\");\n    }\n\n    new_line_name() {\n        // Generate a new line name, based on used names.\n        // Letters A-Z are 0-25. Numbers 1-infinity start at 26\n\n        var used_names = [];\n        for (var i = 0; i < enmodal.transit_interface.active_service.lines.length; i++) {\n            var line = enmodal.transit_interface.active_service.lines[i];\n            if (line.name.length == 1) {\n                if (isNaN(line.name)) {\n                    used_names[line.name.charCodeAt(0) - 65] = 1;\n                } else {\n                    used_names[parseInt(line.name) + 25] = 1;\n                }\n            }\n        }\n        for (i = 0; i < used_names.length; i++) {\n            if (used_names[i] != 1) {\n                if (i < 26) {\n                    return String.fromCharCode(65 + i);\n                } else {\n                    return (i - 25).toString();\n                }\n            }\n        }\n\n        if (used_names.length < 26) {\n            return String.fromCharCode(65 + used_names.length);\n        } else {\n            return (used_names.length - 25).toString();\n        }\n    }\n\n    random_color() {\n        var r = Math.floor(Math.random() * 200);\n        var g = Math.floor(Math.random() * 200);\n        var b = Math.floor(Math.random() * 200);\n        return new LineColor(r, g, b);\n    }\n\n    line_selector_new() {\n        var line = new Line(this.new_line_name());\n        line.full_name = \"Line\";\n\n        var color = this.random_color();\n        line.color_bg = color.bg_hex();\n        line.color_fg = color.fg_hex();\n\n        //console.log(line);\n        if (INC_UPDATES) {\n            var params = $.param({\n                i: enmodal.session_id,\n                service_id: enmodal.transit_interface.active_service.sid,\n                name: line.name,\n                full_name: line.full_name,\n                color_bg: line.color_bg,\n                color_fg: line.color_fg,\n                line_id: line.sid \n            });\n            $.ajax({ url: \"line_add?\"+params,\n                async: ASYNC_REQUIRED,\n                dataType: 'json',\n                success: function(data, status) {\n                }\n            });\n        }\n        enmodal.transit_interface.active_service.add_line(line);\n        this.add_to_line_selector(line);\n        this.update_line_selector(line.sid);\n        enmodal.transit_interface.preview_clear();\n        return line;\n    }\n    \n    clear_line_selector() {\n        enmodal.transit_interface.active_line = null;\n        $(\"#dropdown-line-menu li.line-selector-item\").remove();\n        $(\"#dropdown-line-button\").html(\"Select a line... <span class=\\\"caret\\\"></span>\");\n        $('#custom-line-name').removeClass('issue');\n        $('#custom-line-error').text('');\n\n        $(\"#custom-line-name\").val(\"\");\n        $(\"#custom-line-options #color-picker-bg\").spectrum(\"set\", \"#808183\");\n        $(\"#custom-line-options #color-picker-fg\").spectrum(\"set\", \"#FFF\");\n        this.update_line_editor();\n        this.update_line_diagram();\n    }\n\n    update_line_selector(id) {\n        // Update system state based on line selector click.\n        var line = enmodal.transit_interface.active_service.get_line_by_id(id);\n        enmodal.transit_interface.active_line = line;\n\n        $(\"#dropdown-line-button\").html(\"<div class=\\\"subway-line-long\\\" style=\\\"background-color: \"+line.color_bg+\"; color: \"+line.color_fg+\";\\\"><div class=\\\"content\\\">\"+line.name+\"</div></div> \"+line.full_name+\" <span class=\\\"caret\\\"></span>\");\n\n        $('#custom-line-name').removeClass('issue');\n        $('#custom-line-error').text('');\n\n        $(\"#custom-line-name\").val(line.name);\n        $(\"#custom-line-options #color-picker-bg\").spectrum(\"set\", line.color_bg);\n        $(\"#custom-line-options #color-picker-fg\").spectrum(\"set\", line.color_fg);\n        this.update_line_editor();\n        this.update_line_diagram();\n        enmodal.transit_interface.preview_clear();\n    }\n\n    update_line_editor() {\n        var line_name = $(\"#custom-line-name\").val();\n        if (line_name !== undefined) line_name = line_name.substring(0, 40);\n        $(\"#custom-line-marker-content\").text(line_name);\n\n        var line_color_bg = $(\"#color-picker-bg\").val();\n        $('#custom-line-marker').css('background-color', line_color_bg);\n\n        var line_color_fg = $(\"#color-picker-fg\").val();\n        $('#custom-line-marker').css('color', line_color_fg);\n    }\n\n    refresh_line_editor() {\n        $(\".line-selector-item\").remove();\n        for (var i = 0; i < enmodal.transit_interface.active_service.lines.length; i++) {\n            var line = enmodal.transit_interface.active_service.lines[i];\n            $(\"#dropdown-line-menu\").prepend(\"<li class=\\\"line-selector-item\\\"><a class=\\\"line-selector-option\\\" transit-line-id=\\\"\"+line.sid.toString()+\"\\\" href=\\\"#\\\"> <div class=\\\"subway-line-long\\\" style=\\\"background-color: \"+line.color_bg+\"; color: \"+line.color_fg+\";\\\"><div class=\\\"content\\\">\"+line.name+\"</div></div> \"+line.full_name+\"</a></li>\");\n        }\n        if (enmodal.transit_interface.active_line !== null) {\n            $(\"#custom-line-options #color-picker-bg\").spectrum(\"set\", enmodal.transit_interface.active_line.color_bg);\n            $(\"#custom-line-options #color-picker-fg\").spectrum(\"set\", enmodal.transit_interface.active_line.color_fg);\n        } else {\n            $(\"#custom-line-options #color-picker-bg\").spectrum(\"set\", DEFAULT_LINE_BG);\n            $(\"#custom-line-options #color-picker-fg\").spectrum(\"set\", DEFAULT_LINE_FG);\n        }\n    }\n\n    line_editor_save() {\n        var line = enmodal.transit_interface.active_line;\n\n        var custom_line_name = $(\"#custom-line-name\").val();\n        if (custom_line_name !== undefined) custom_line_name = custom_line_name.substring(0, 40);\n        var custom_line_color_bg = $(\"#custom-line-options #color-picker-bg\").val();\n        var custom_line_color_fg = $(\"#custom-line-options #color-picker-fg\").val();\n        var issue = false;\n\n        if (custom_line_name.length === 0) {\n            $('#custom-line-name').addClass('issue');\n            $('#custom-line-error').text('Enter a name.');\n            issue = true;\n        }\n\n        if (!issue) {\n            line.name = custom_line_name;\n            line.color_bg = custom_line_color_bg;\n            line.color_fg = custom_line_color_fg;\n\n            $('#custom-line-name').removeClass('issue');\n            $('#custom-line-css-bg').removeClass('issue');\n            $('#custom-line-css-text').removeClass('issue');\n            $('#custom-line-error').text('');\n\n            this.update_line_selector(line.sid);\n            $(\"a[transit-line-id='\"+line.sid.toString()+\"']\").html(\"<div class=\\\"subway-line-long\\\" style=\\\"background-color: \"+line.color_bg+\"; color: \"+line.color_fg+\";\\\"><div class=\\\"content\\\">\"+line.name+\"</div></div> \"+line.full_name);\n            enmodal.transit_interface.draw_line(line, false, true, enmodal.transit_interface.layers.active.line_paths, true, enmodal.transit_interface.active_service);\n        } else {\n            $(\"#option-section-lines\").animate({scrollTop: $('#option-section-lines').prop('scrollHeight')}, 1000);\n        }\n    }\n    \n    update_line_diagram() {\n        var line = enmodal.transit_interface.active_line;\n        \n        if (line === null) {\n            $(\"#route-diagram\").empty();\n            return;\n        }\n        if (line.stops.length === 0) {\n            $(\"#route-diagram\").empty();\n            return;\n        }\n\n        // Get the outer stops.\n        var outer_stops = line.outer_stops();\n        var active_stop = outer_stops[0];\n\n        // Initialize visited stops.\n        var visited = {};\n        var visited_stops_count = 0;\n        for (var j = 0; j < line.stops.length; j++) {\n            visited[line.stops[j].sid] = 0;\n        }\n\n        var stop_groups = [[]];\n        var branch_pos = [];\n\n        // recursive DFS to find all the paths\n        function dfs(v) {\n            //console.log(\"DFS: node \"+v.station.name);\n\n            stop_groups[stop_groups.length-1].push(v);\n\n            visited[v.sid] = 1;\n            var neighbors = line.neighbors(v);\n            var new_neighbor_count = 0;\n            for (var i = 0; i < neighbors.length; i++) {\n                var w = neighbors[i];\n                if (!visited[w.sid]) {\n                    if (new_neighbor_count > 0) {\n                        // Expand the arrays to start a new path.\n                        stop_groups.push([]);\n                        stop_groups[stop_groups.length-1].push(v);\n                        branch_pos.push(v.sid);\n                    }\n                    new_neighbor_count += 1;\n                    dfs(w);\n                }\n            }\n        }\n\n        if (line.stops.length > 0) {\n            dfs(active_stop);\n        }\n\n        //console.log(stop_groups);\n\n        $(\"#route-diagram\").empty();\n\n        var stop_index = 0;\n        var stop_position = {}; // stop id :: position in route diagram list\n\n        var branch_div = $('<div class=\"route-diagram-branch\"></div>');\n        $(\"#route-diagram\").append(branch_div);\n\n        for (var i = 0; i < stop_groups.length; i++) {\n            var stop_group = stop_groups[i];\n\n            // For everything past the 1st stop group, it's a branch. Ignore the first stop, it will be redundant.\n            var start_index = 0;\n            if (i > 0) {\n                start_index = 1;\n            }\n\n\n            for (j = start_index; j < stop_group.length; j++) {\n                var stop = stop_group[j];\n\n                // Add a leading connector if this is the start of a branch.\n                if (j == start_index+1 && i > 0) {\n                    branch_div = $('<div class=\"route-diagram-branch\"></div>');\n                    $(\"#route-diagram\").append(branch_div);\n                }\n                \n                if (branch_pos.indexOf(stop.sid) > -1) {\n                    branch_div = $('<div class=\"route-diagram-branch\"></div>');\n                    $(\"#route-diagram\").append(branch_div);\n                    var connector_div = $('<div class=\"route-diagram-branch-connectors\"></div>');\n                    branch_div.append(connector_div);\n                    connector_div.append('<div class=\"route-diagram-connector-top-joint\" style=\"background-color: '+line.color_bg+';\"></div>');\n                    connector_div.append('<div class=\"route-diagram-connector-branch\"><div class=\"route-diagram-connector-internal\" style=\"background-color: '+line.color_bg+';\"></div></div>');\n                    connector_div.append('<div class=\"route-diagram-connector-bottom-joint\" style=\"background-color: '+line.color_bg+';\"></div>');\n                }\n\n                var stop_div = $('<div class=\"route-diagram-stop\"></div>');\n                branch_div.append(stop_div);\n                stop_div.append('<div class=\"route-diagram-station-marker\"></div>');\n\n                // Add a trailing connector if this isn't the end of a branch.\n                if (j != stop_group.length - 1) {\n                    stop_div.append('<div class=\"route-diagram-connector\" style=\"background-color: '+line.color_bg+'\"></div>');\n                }\n                \n                var stop_info_div = $('<div class=\"route-diagram-stop-info\" id=\"station-'+stop.station.sid.toString()+'\"></div>');\n                stop_div.append(stop_info_div);\n                stop_info_div.append('<div class=\"route-diagram-stop-name\">'+stop.station.name+'</div>');\n                \n                var stop_connectors = $('<div class=\"route-diagram-stop-connectors\"></div>');\n                stop_info_div.append(stop_connectors);\n                // Add an empty connector just to make sure each stop row has the height it needs\n                stop_connectors.append('<div class=\"subway-line-long subway-line-mini subway-line-marker-diagram subway-line-marker-diagram-fake\" style=\"font-size: 1em;\"><div class=\"content\"></div></div>');\n                var connecting_lines = [];\n                for (var k = 0; k < enmodal.transit_interface.active_service.lines.length; k++) {\n                    if (enmodal.transit_interface.active_service.lines[k].sid != line.sid) {\n                        if (enmodal.transit_interface.active_service.lines[k].has_station(stop.station)) {\n                            connecting_lines.push(enmodal.transit_interface.active_service.lines[k]);\n                        }\n                    }\n                }\n                for (k = 0; k < enmodal.transit_interface.active_service.transfers.length; k++) {\n                    if (enmodal.transit_interface.active_service.transfers[k].has_station(stop.station)) {\n                        var transfer_stations = enmodal.transit_interface.active_service.transfers[k].stations;\n                        for (var l = 0; l < transfer_stations.length; l++) {\n                            if (transfer_stations[l] != stop.station) {\n                                var transfer_station_lines = enmodal.transit_interface.active_service.station_lines(transfer_stations[l]);\n                                for (var m = 0; m < transfer_station_lines.length; m++) {\n                                    if (connecting_lines.indexOf(transfer_station_lines[m]) == -1) {\n                                        connecting_lines.push(transfer_station_lines[m]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                for (k = 0; k < connecting_lines.length; k++) {\n                    stop_connectors.append('<div class=\"subway-line-long subway-line-mini subway-line-marker-diagram\" style=\"font-size: 1em; background-color: '+connecting_lines[k].color_bg+'; color: '+connecting_lines[k].color_fg+';\"><div class=\"content\">'+connecting_lines[k].name+'</div></div>');\n                }\n\n                // Store the stop index.\n                stop_position[stop.sid] = stop_index;\n                stop_index += 1;\n            }\n        }\n    }\n    \n    add_to_service_selector(service) {\n        // Add a service to the service selector dropdown.\n        $(\"#dropdown-service-menu\").prepend(\"<li class=\\\"service-selector-item\\\"><a class=\\\"service-selector-option\\\" transit-service-id=\\\"\"+service.sid.toString()+\"\\\" href=\\\"#\\\">\"+service.name+\"</a></li>\");\n\n    }\n\n    service_selector_new() {\n        var service = new Service(\"Service\");\n\n        //console.log(line);\n        if (INC_UPDATES) {\n            var params = $.param({\n                i: enmodal.session_id,\n                service_id: service.sid,\n                name: service.name\n            });\n            $.ajax({ url: \"service_add?\"+params,\n                async: ASYNC_REQUIRED,\n                dataType: 'json',\n                success: function(data, status) {\n                }\n            });\n        }\n        enmodal.transit_map.add_service(service);\n        this.add_to_service_selector(service);\n        this.update_service_selector(service.sid, true);\n        enmodal.transit_interface.active_line = null;\n        this.clear_line_selector();\n        enmodal.transit_interface.preview_clear();\n        \n        enmodal.transit_interface.draw_service(service, enmodal.transit_interface.layers.active, true, true);\n        \n        return service;\n    }\n\n    update_service_selector(id, draw) {\n        // Update system state based on service selector click.\n        var service = enmodal.transit_map.get_service_by_id(id);\n        enmodal.transit_interface.active_service = service;\n\n        $(\"#dropdown-service-button\").html(service.name+\" <span class=\\\"caret\\\"></span>\");\n\n        $('#custom-service-name').removeClass('issue');\n        $('#custom-service-error').text('');\n\n        $(\"#custom-service-name\").val(service.name);\n        \n        $(\".service-mode-button\").removeClass(\"active\");\n        if (service.mode == \"heavy_rail\") {\n            $(\"#service-option-heavy-rail\").addClass(\"active\");\n        }\n        if (service.mode == \"light_rail\") {\n            $(\"#service-option-light-rail\").addClass(\"active\");\n        }\n        if (service.mode == \"bus\") {\n            $(\"#service-option-bus\").addClass(\"active\");\n        }\n        \n        if (service.lines.length > 0) {\n            this.update_line_selector(service.lines[0].sid);\n            enmodal.transit_interface.active_line = service.lines[0];\n        } else {\n            this.clear_line_selector();\n            enmodal.transit_interface.active_line = null;\n        }\n        enmodal.transit_interface.preview_clear();\n        \n        if (draw) enmodal.transit_interface.draw_service(service, enmodal.transit_interface.layers.active, true, true);\n        \n        this.update_line_editor();\n        this.refresh_line_editor();\n        this.update_line_diagram();\n        \n        enmodal.leaflet_map.closePopup();\n    }\n\n    refresh_service_editor() {\n        $(\".service-selector-item\").remove();\n        for (var i = 0; i < enmodal.transit_map.services.length; i++) {\n            var service = enmodal.transit_map.services[i];\n            $(\"#dropdown-service-menu\").prepend(\"<li class=\\\"service-selector-item\\\"><a class=\\\"service-selector-option\\\" transit-service-id=\\\"\"+service.sid+\"\\\" href=\\\"#\\\">\"+service.name+\"</a></li>\");\n        }\n    }\n\n    service_editor_save() {\n        var service = enmodal.transit_interface.active_service;\n        \n        var custom_service_name = $(\"#custom-service-name\").val().substring(0, 20);\n        var issue = false;\n\n        if (custom_service_name.length === 0) {\n            $('#custom-service-name').addClass('issue');\n            $('#custom-service-error').text('Enter a name.');\n            issue = true;\n        }\n        if (!issue) {\n            service.name = custom_service_name;\n\n            $('#custom-service-name').removeClass('issue');\n            $('#custom-service-css-bg').removeClass('issue');\n            $('#custom-service-css-text').removeClass('issue');\n            $('#custom-service-error').text('');\n\n            this.update_service_selector(service.sid, false);\n            $(\"a[transit-service-id='\"+service.sid+\"']\").html(service.name);\n        } else {\n            $(\"#option-section-services\").animate({scrollTop: $('#option-section-services').prop('scrollHeight')}, 1000);\n        }\n    }\n}","class StationPair {\n    \n    // Two stations associated with an array of LineControlPoints\n    constructor(service, stations, layer) {\n        this.sid = _id_factory.id();\n        this.service = service;\n        this.stations = stations;\n        this.line_spline_segments = [];\n        this.paths = [];\n        this.street_path = null;\n        this.street_path_is_valid = false;\n        this.pins = [];\n        this.draw_counter = 0;\n        this.group_sss = null;\n        this.layer = layer;\n    }\n    \n    set_layer(layer) {\n        this.undraw();\n        this.layer = layer;\n    }\n    \n    add_line_spline_segment(lss) {\n        this.line_spline_segments.push(lss);\n        this.line_spline_segments.sort(function(a,b) {\n            return a.line.sid > b.line.sid;\n        });\n    }\n    \n    clear_spline_segment_for_line(line) {\n        for (var i = this.line_spline_segments.length - 1; i >= 0; i--) {\n            var lss = this.line_spline_segments[i];\n            if (lss.line == line) {\n                this.line_spline_segments.splice(i, 1);\n            }\n        }\n    }\n    \n    clear_spline_segments() {\n        this.line_spline_segments = [];\n    }\n    \n    lines() {\n        var lines = [];\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss_line = this.line_spline_segments[i].line;\n            if (lines.indexOf(lss_line) == -1) {\n                lines.push(lss_line);\n            }\n        }\n        return lines;\n    }\n    \n    has_line(line) {\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss_line = this.line_spline_segments[i].line;\n            if (lss_line == line) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    has_station(station) {\n        for (var i = 0; i < this.stations.length; i++) {\n            if (this.stations[i].sid == station.sid) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    num_lines() {\n        var used_lines = [];\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss_line = this.line_spline_segments[i].line;\n            if (used_lines.indexOf(lss_line) == -1) {\n                used_lines.push(lss_line);\n            }\n        }\n        return used_lines.length;\n    }\n    \n    num_lines_color() {\n        var ret = 0;\n        var used_colors = [];\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss_line = this.line_spline_segments[i].line;\n            if (used_colors.indexOf(lss_line.color_bg) == -1) {\n                used_colors.push(lss_line.color_bg);\n                ret += 1;\n            }\n        }\n        return ret;\n    }\n    \n    ss_pos(ss) {\n        var used_lines = [];\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss_line = this.line_spline_segments[i].line;\n            if (used_lines.indexOf(lss_line) == -1) {\n                used_lines.push(lss_line);\n            }\n        }\n        for (var j = 0; j < used_lines.length; j++) {\n            if (used_lines[j] == ss.line) {\n                return j;\n            }\n        }\n        return -1;\n    }\n    \n    lss_pos_color(lss) {\n        var used_colors = [];\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss_line = this.line_spline_segments[i].line;\n            if (used_colors.indexOf(lss_line.color_bg) == -1) {\n                used_colors.push(lss_line.color_bg);\n            }\n        }\n        for (var j = 0; j < used_colors.length; j++) {\n            if (used_colors[j] == lss.line.color_bg) {\n                return j;\n            }\n        }\n        return -1;\n    }\n    \n    average_sss() {\n        var a = [];\n        var k;\n        // Sum all the control points\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss = this.line_spline_segments[i];\n            for (var j = 0; j < lss.spline_segments.length; j++) {\n                var ss = lss.spline_segments[j];\n                if (a.length <= j) {\n                    // Gotta do this weirdness to force a deep copy\n                    var controls = []; //JSON.parse(JSON.stringify(ss.controls));\n                    var centers = []; //JSON.parse(JSON.stringify(ss.centers));\n                    // Add centers\n                    for (k = 0; k < ss.centers.length; k++) {\n                        centers.push(new BezierCenter(ss.centers[k].lat, ss.centers[k].lng));\n                    }\n                    // Add controls\n                    for (k = 0; k < ss.controls.length; k++) {\n                        controls.push(new BezierControlPoint(ss.controls[k].lat, ss.controls[k].lng));\n                    }\n                    a.push(new SplineSegment(controls, centers));\n                } else {\n                    // Add centers\n                    /*for (var k = 0; k < ss.centers.length; k++) {\n                        a[j].centers[k].lat += ss.centers[k].lat;\n                        a[j].centers[k].lng += ss.centers[k].lng;\n                    }*/\n                    // Add controls\n                    for (k = 0; k < ss.controls.length; k++) {\n                        a[j].controls[k].lat += ss.controls[k].lat;\n                        a[j].controls[k].lng += ss.controls[k].lng;\n                    }\n                }\n            }\n        }\n        // Divide by number of lines\n        for (i = 0; i < a.length; i++) {\n            var s = a[i];\n            // Divide centers\n            /*for (var k = 0; k < s.centers.length; k++) {\n                a[j].centers[k].lat = a[j].centers[k].lat / this.line_spline_segments.length;\n                a[j].centers[k].lng = a[j].centers[k].lng / this.line_spline_segments.length;\n            }*/\n            // Divide controls\n            for (k = 0; k < s.controls.length; k++) {\n                a[i].controls[k].lat = a[i].controls[k].lat / this.line_spline_segments.length;\n                a[i].controls[k].lng = a[i].controls[k].lng / this.line_spline_segments.length;\n            }\n        }\n        this.group_sss = a;\n        return a;\n    }\n    \n    project_pin(lat, lng) {\n        var sss = this.average_sss();\n        var min_distance = -1;\n        var best_p = null;\n        for (var i = 0; i < sss.length; i++) {\n            var ss = sss[i];\n            var curve;\n            if (ss.controls.length == 1) {\n                curve = new Bezier(ss.centers[0].lat, ss.centers[0].lng, ss.controls[0].lat, ss.controls[0].lng, ss.centers[1].lat, ss.centers[1].lng);\n            } else {\n                curve = new Bezier(ss.centers[0].lat, ss.centers[0].lng, ss.controls[0].lat, ss.controls[0].lng, ss.controls[1].lat, ss.controls[1].lng, ss.centers[1].lat, ss.centers[1].lng);\n            }\n            var p = curve.project({x: lat, y: lng});\n            if (best_p === null || p.d < min_distance) {\n                min_distance = p.d;\n                best_p = p;\n            }\n        }\n        return best_p;\n    }\n    \n    distance_to_nearest_pin(lat, lng) {\n        // TODO calling average_sss a lot, maybe need to cache the result?\n        var sss = this.average_sss();\n        var min_distance = -1;\n        for (var i = 0; i < this.pins.length; i++) {\n            var pin = this.pins[i];\n            var px_n = enmodal.leaflet_map.latLngToLayerPoint(L.latLng(lat, lng));\n            var px_p = enmodal.leaflet_map.latLngToLayerPoint(L.latLng(pin.location[0], pin.location[1]));\n            var d = px_n.distanceTo(px_p);\n            if (min_distance == -1 || d < min_distance) {\n                min_distance = d;\n            }\n        }\n        return min_distance;\n    }\n        \n    \n    increment_draw_counter() {\n        this.draw_counter = this.draw_counter + 1;\n        if (this.draw_counter > FOLLOW_STREET_MOVE_THRESH) {\n            this.draw_counter = 0;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    generate_path(lss, color, offset, weight, opacity) {  \n        var path = null;\n        var self = this;\n        if (this.service.mode == \"bus\") {\n            if (this.increment_draw_counter() || !this.street_path_is_valid) {\n                var params = $.param({\n                    i: enmodal.session_id,\n                    service_id: enmodal.transit_interface.active_service.sid,\n                    station_1_lat: this.stations[0].location[0],\n                    station_1_lng: this.stations[0].location[1],\n                    station_2_lat: this.stations[1].location[0],\n                    station_2_lng: this.stations[1].location[1]\n                });\n                $.ajax({ url: \"street_path?\"+params,\n                    async: true,\n                    dataType: 'json',\n                    success: function(data, status) {\n                        handle_server_error(data);\n                        var ll = [];\n                        for (var i = 0; i < data[0].length; i++) {\n                            ll.push([data[0][i][1], data[0][i][0]]);\n                        }\n                        this.street_path = ll;\n                        this.street_path_is_valid = true;\n                        path = L.polyline(ll, {weight: weight, color: color, opacity: opacity, offset: offset*(weight/2)});\n                        self.undraw_paths();\n                        self.paths.push(path);\n                        self.draw_paths();\n                    }\n                });\n            } else {\n                path = L.polyline(self.street_path, {weight: weight, color: color, opacity: opacity, offset: offset*(weight/2)});\n            }\n        } else {\n            var sss = this.average_sss();\n            var bezier_options = [];\n            for (var i = 0; i < sss.length; i++) {\n                var ss = sss[i];\n                bezier_options.push('M');\n                bezier_options.push([ss.centers[0].lat, ss.centers[0].lng]);\n                var new_options = [];\n                if (ss.controls.length == 1) {\n                    new_options.push('Q');\n                }\n                if (ss.controls.length == 2) {\n                    new_options.push('C');\n                }\n                for (var j = 0; j < ss.controls.length; j++) {\n                    new_options.push([ss.controls[j].lat, ss.controls[j].lng]);\n                }\n                new_options.push([ss.centers[1].lat, ss.centers[1].lng]);\n                bezier_options.push.apply(bezier_options, new_options);\n            }\n            var o = offset*(weight/2);\n            //if (lss.reverse) o = o*-1;\n            var curve_options = {\"color\": color, \"weight\": weight, \"opacity\": opacity, \"fill\": false, \"smoothFactor\": 1.0, \"offset\": o, \"clickable\": false, \"pointer-events\": \"none\", \"className\": \"no-hover\"};\n            path = L.curve(bezier_options, curve_options);\n        }\n        return path;\n    }\n    \n    add_pin(lat, lng) {\n        // Find the best spot in the pin order\n        var sss = this.average_sss();\n        var new_distance = -1;\n        var new_pt = null;\n        for (var i = 0; i < sss.length; i++) {\n            var ss = sss[i];\n            var curve;\n            if (ss.controls.length == 1) {\n                curve = new Bezier(ss.centers[0].lat, ss.centers[0].lng, ss.controls[0].lat, ss.controls[0].lng, ss.centers[1].lat, ss.centers[1].lng);\n            } else {\n                curve = new Bezier(ss.centers[0].lat, ss.centers[0].lng, ss.controls[0].lat, ss.controls[0].lng, ss.controls[1].lat, ss.controls[1].lng, ss.centers[1].lat, ss.centers[1].lng);\n            }\n            var steps = curve.getLUT(BEZIER_LUT_STEPS);\n            \n            for (var j = 0; j < steps.length - 1; j++) {\n                var dn = enmodal.leaflet_map.distance(L.latLng(lat, lng), L.latLng(steps[j].x, steps[j].y));\n                if (new_distance == -1 || dn < new_distance) {\n                    new_pt = j + (i*BEZIER_LUT_STEPS);\n                    new_distance = dn;\n                }\n            }\n        }\n        \n        var new_pin = new Pin([lat, lng]);\n        this.generate_pin_marker(new_pin);\n        var splice_point = Math.floor(new_pt/BEZIER_LUT_STEPS);\n        this.pins.splice(splice_point, 0, new_pin);\n        this.draw_lines();\n\n        push_undo_buffer();\n    }\n    \n    remove_pin(pin) {\n        var pin_index = this.pins.indexOf(pin);\n        if (pin_index > -1) {\n            this.pins.splice(pin_index, 1);\n        }\n\n        push_undo_buffer();\n    }\n    \n    generate_paths(active) {\n        this.undraw_paths();\n        this.paths = [];\n        var opacity = 1.0;\n        if (!active) opacity = INACTIVE_OPACITY / this.num_lines();\n        for (var i = 0; i < this.line_spline_segments.length; i++) {\n            var lss = this.line_spline_segments[i];\n            var offset = this.lss_pos_color(lss)*2 - (this.num_lines_color()-1);\n            var path = this.generate_path(lss, lss.line.color_bg, offset, TRACK_WIDTH, opacity);\n            if (path !== null) this.paths.push(path);\n            // for debug only\n            //this.draw_paths();\n            if (DEBUG_BEZIER_CONTROLS) {\n                for (var j = 0; j < lss.spline_segments.length; j++) {\n                    var ss = lss.spline_segments[j];\n                    for (var k = 0; k < ss.controls.length; k++) {\n                        var color = \"#000\";\n                        if (k > 0) color = \"#fff\";\n                        this.paths.push(L.circleMarker([ss.controls[k].lat, ss.controls[k].lng], {color: color, opacity: 0.75, fillColor: lss.line.color_bg, fillOpacity: 1.0, radius: 4}));\n                        this.paths.push(L.polyline([[ss.controls[k].lat, ss.controls[k].lng], [ss.centers[k].lat, ss.centers[k].lng]], {color: \"#aaa\", opacity: 0.75}));\n                    }\n                }\n            }\n        }\n    }\n    \n    undraw_paths() {\n        for (var j = 0; j < this.paths.length; j++) {\n            this.layer.removeLayer(this.paths[j]);\n        }\n    }\n    \n    draw_paths() {\n        for (var j = 0; j < this.paths.length; j++) {\n            this.layer.addLayer(this.paths[j]);\n        }\n    }\n    \n    undraw_pins() {\n        for (var j = 0; j < this.pins.length; j++) {\n            this.pins[j].undraw();\n        }\n    }\n    \n    get_pin_by_leaflet_id(leaflet_id) {\n        for (var j = 0; j < this.pins.length; j++) {\n            if (this.pins[j].marker._leaflet_id == leaflet_id) {\n                return this.pins[j];\n            }\n        }\n        return null;\n    }\n    \n    generate_pin_marker(pin) {\n        var m = L.marker([pin.location[0], pin.location[1]], {draggable: true, icon: PIN_ICON});\n        m.id = \"pin-\"+pin.sid.toString();\n        pin.marker = m;\n        var self = this;\n        m.on('drag', function(e) {\n            var p = self.get_pin_by_leaflet_id(e.target._leaflet_id);\n            p.location = [e.latlng.lat, e.latlng.lng];\n            self.draw_lines();\n            enmodal.transit_interface.dragging_pin = true;\n        });\n        m.on('click', function(e) {\n            var p = self.get_pin_by_leaflet_id(e.target._leaflet_id);\n            p.undraw();\n            self.remove_pin(p);\n            var lines = self.lines();\n            var active = self.service == enmodal.transit_interface.active_service;\n            for (var i = 0; i < lines.length; i++) {\n                var line = lines[i];\n                enmodal.transit_interface.draw_line(line, true, true, self.layer, active, self.service);\n            }\n            self.draw_pins();\n        });\n        m.on('dragend', function(e) {\n            enmodal.transit_interface.dragging_pin = false;\n            push_undo_buffer();\n        });\n        return m;\n    }\n    \n    draw_lines() {\n        var lines = this.lines();\n        var active = this.service == enmodal.transit_interface.active_service;\n        for (var i = 0; i < lines.length; i++) {\n            var line = lines[i];\n            enmodal.transit_interface.draw_line(line, true, true, this.layer, active, this.service);\n        }\n    }\n    \n    draw_pins() {\n        for (var j = 0; j < this.pins.length; j++) {\n            this.pins[j].draw();\n        }\n    }\n    \n    undraw() {\n        this.undraw_paths();\n        this.undraw_pins();\n    }\n    \n    draw() {\n        try {\n            this.draw_paths();\n        } catch(err) {\n            console.log(\"Error drawing paths!\");\n            console.log(this.sss);\n        }\n        // Pin drawing is separate: let main application decide if it's needed\n        //this.draw_pins();\n    }\n    \n    toJSON() {\n        var station_ids = [];\n        for (var i = 0; i < this.stations.length; i++) {\n            station_ids.push(this.stations[i].sid);\n        }\n        var pins = [];\n        for (i = 0; i < this.pins.length; i++) {\n            pins.push(this.pins[i].toJSON());\n        }\n        return {\"sid\": this.sid, \"station_ids\": station_ids, \"pins\": pins};\n    }\n\n}    ","class Map {\n    /*\n     * A Map contains a collection of Services, everything needed for a single Transit session.\n     *\n     * Attributes:\n     *  services: An array of Services.\n     */\n\n    constructor() {\n        this.sid = _id_factory.id();\n        this.services = [];\n    }\n\n    add_service(s) {\n        this.services.push(s);\n    }\n\n    primary_service() {\n        return this.services[0];\n    }\n    \n    get_service_by_id(id) {\n        for (var i = 0; i < this.services.length; i++) {\n            if (this.services[i].sid == id) return this.services[i];\n        }\n        return null;\n    }\n    \n    // Check all services for a station\n    get_station_by_id(id) {\n        for (var i = 0; i < this.services.length; i++) {\n            var station = this.services[i].get_station_by_id(id);\n            if (station !== null) return station;\n        }\n        return null;\n    }\n    \n    geographic_bounds() {\n        var lat_min = 0.0;\n        var lat_min_set = false;\n        var lat_max = 0.0;\n        var lat_max_set = false;\n        var lng_min = 0.0;\n        var lng_min_set = false;\n        var lng_max = 0.0;\n        var lng_max_set = false;\n        var num_stations = 0;\n\n        for (var i = 0; i < this.services.length; i++) {\n            for (var j = 0; j < this.services[i].stations.length; j++) {\n                var station = this.services[i].stations[j];\n                num_stations += 1;\n                if (!lat_min_set || station.location[0] < lat_min) {\n                    lat_min = station.location[0];\n                    lat_min_set = true;\n                }\n                if (!lat_max_set || station.location[0] > lat_max) {\n                    lat_max = station.location[0];\n                    lat_max_set = true;\n                }\n                if (!lng_min_set || station.location[1] < lng_min) {\n                    lng_min = station.location[1];\n                    lng_min_set = true;\n                }\n                if (!lng_max_set || station.location[1] > lng_max) {\n                    lng_max = station.location[1];\n                    lng_max_set = true;\n                }\n            }\n        }\n        if (num_stations === 0) return null;\n        \n        var bounds = L.latLngBounds(L.latLng(lat_min, lng_min), L.latLng(lat_max, lng_max));\n        return bounds;\n    }\n\n    to_json() {\n        return JSON.stringify(this);\n    }\n\n    from_json(j) {\n        this.sid = j.sid;\n        this.services = [];\n        for (var i = 0; i < j.services.length; i++) {\n            var s = new Service(j.services[i].name);\n            s.sid = j.services[i].sid;\n            s.from_json(j.services[i]);\n            this.add_service(s);\n        }\n    }\n}\n\nclass Station {\n    /*\n     * A Station is a physical location consisting of one or more Stops.\n     *\n     * Attributes:\n     *  name: A string representing the Station's name.\n     *  location: A [lat, lng] pair describing the Station's physical location.\n     *  streets: An array of strings containing nearby street names.\n     *  neighborhood: The name of the neighborhood the Station is in, if applicable.\n     *  locality: The name of the city or town the Station is in.\n     *  region: The name of the state the Station is in.\n     */\n\n    constructor(name, location, preview) {\n        if (preview === undefined || preview === false) {\n            this.sid = _id_factory.id();\n        } else {\n            this.sid = 0;\n        }\n        this.name = name;\n        this.location = location;\n        this.streets = [];\n        this.neighborhood = \"\";\n        this.locality = \"\";\n        this.region = \"\";\n        this.ridership = -1;\n    }\n\n    move_to(lat, lng) {\n        this.location = [lat, lng];\n    }\n\n    to_json() {\n        return JSON.stringify(this);\n    }\n\n    from_json(j) {\n        this.sid = j.sid;\n        this.name = j.name;\n        this.location = [parseFloat(j.location[0]), parseFloat(j.location[1])];\n        this.streets = j.streets;\n        this.neighborhood = j.neighborhood;\n        this.locality = j.locality;\n        this.region = j.region;\n    }\n}\n\nclass Stop {\n    /*\n     * A Stop represents a location at which a Line can stop.\n     *\n     * Attributes:\n     *  station: The Station this stop is contained within.\n     */\n\n    constructor(station, preview) {\n        if (preview === undefined || preview === false) {\n            this.sid = _id_factory.id();\n        } else {\n            this.sid = 0;\n        }\n        this.station = station;\n    }\n\n    toJSON() {\n        return {\"sid\": this.sid, \"station_id\": this.station.sid};\n        //return JSON.stringify(this);\n    }\n\n    from_json(j, service) {\n        this.sid = j.sid;\n        this.station = service.get_station_by_id(j.station_id);\n        if (this.station === undefined) {\n            console.log(j);\n        }\n    }\n}\n\nclass Line {\n    /*\n     * A Line represents a transit service. It consists of Stops connected by Edges.\n     *\n     * Attributes:\n     *  name: A string representing the Line's name.\n     *  long_name: A string representing the Line's full name.\n     *  color_bg: Hex code for the Line's background color.\n     *  color_fg: Hex code for the Line's foreground color.\n     *  group_id: A unique identifier, used for grouping Lines when drawing.\n     *  stops: An array of Stops on this Line.\n     *  edges: An array of Edges on this Line.\n     */\n\n    constructor(name) {\n        this.sid = _id_factory.id();\n        this.name = name;\n        this.full_name = name;\n        this.color_bg = \"#000000\";\n        this.color_fg = \"#FFFFFF\";\n        this.group_id = 0;\n        this.stops = [];\n        this.edges = [];\n    }\n\n    add_stop(stop) {\n        this.stops.push(stop);\n    }\n\n    remove_stop(stop) {\n        var stop_index = this.stops.indexOf(stop);\n        if (stop_index > -1) {\n            this.stops.splice(stop_index, 1);\n        }\n    }\n\n    has_stop(stop) {\n        for (var i = 0; i < this.stops.length; i++) {\n            if (this.stops[i].sid == stop.sid) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get_stop_by_id(id) {\n        for (var i = 0; i < this.stops.length; i++) {\n            if (this.stops[i].sid == id) {\n                return this.stops[i];\n            }\n        }\n        return null;\n    }\n\n    get_stops_by_station(station) {\n        var stops = [];\n        for (var i = 0; i < this.stops.length; i++) {\n            if (this.stops[i].station.sid == station.sid) {\n                stops.push(this.stops[i]);\n            }\n        }\n        return stops;\n    }\n\n    has_station(station) {\n        for (var i = 0; i < this.stops.length; i++) {\n            if (this.stops[i].station.sid == station.sid) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    add_edge(edge) {\n        this.edges.push(edge);\n    }\n\n    remove_edge(edge) {\n        var edge_index = this.edges.indexOf(edge);\n        if (edge_index > -1) {\n            this.edges.splice(edge_index, 1);\n        }\n    }\n    \n    has_edge(edge) {\n        for (var i = 0; i < this.edges.length; i++) {\n            if (this.edges[i].sid == edge.sid) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get_edge_by_id(id) {\n        for (var i = 0; i < this.edges.length; i++) {\n            if (this.edges[i].sid == id) {\n                return this.edges[i];\n            }\n        }\n        return null;\n    }\n\n    get_edge_by_stops(stops) {\n        for (var i = 0; i < this.edges.length; i++) {\n            if (this.edges[i].compare_stops(stops)) {\n                return this.edges[i];\n            }\n        }\n        return null;\n    }\n\n    length() {\n        var distance = 0.0;\n        for (var i = 0; i < this.edges.length; i++) {\n            distance += this.edges[i].length();\n        }\n        return distance;\n    }\n\n    neighbors(stop) {\n        // Returns all neighbors of the input stop.\n\n        var neighbors = [];\n        for (var i = 0; i < this.edges.length; i++) {\n            var edge = this.edges[i];\n            if (edge.stops[0].sid == stop.sid) {\n                neighbors.push(edge.stops[1]);\n            }\n            if (edge.stops[1].sid == stop.sid) {\n                neighbors.push(edge.stops[0]);\n            }\n        }\n        return neighbors;\n    }\n\n    dijkstra(source) {\n        // Returns a 2D array containing the distance between\n        // a source stop and all other stops.\n\n        var distance = {};\n        var visited = {};\n\n        for (var i = 0; i < this.stops.length; i++) {\n            distance[this.stops[i].sid] = 0;\n            visited[this.stops[i].sid] = 0;\n        }\n\n        distance[source.sid] = 0;\n        visited[source.sid] = 1;\n\n        // TODO optimize this iterator...\n        for (i = 0; i < this.stops.length; i++) {\n            var neighbors = this.neighbors(this.stops[i]);\n            for (var j = 0; j < neighbors.length; j++) {\n                var alt = distance[this.stops[i].sid] + 1;\n                if (alt < distance[neighbors[j].sid] || !visited[neighbors[j].sid]) {\n                    distance[neighbors[j].sid] = alt;\n                    visited[neighbors[j].sid] = 1;\n                }\n            }\n        }\n\n        return distance;\n    }\n\n    center_stop() {\n        // This function returns the Jordan center of the line, i.e.\n        // the set of stops where the greatest distance to all other\n        // stops is minimized.\n\n        var best_length = -1;\n        var center_stops = [];\n\n        for (var i = 0; i < this.stops.length; i++) {\n            var stop = this.stops[i];\n            var djikstra = this.dijkstra(stop);\n            var sum_distance = 0;\n            for (var j in djikstra) {\n                sum_distance += djikstra[j];\n            }\n            if (sum_distance < best_length || best_length == -1) {\n                best_length = sum_distance;\n                center_stops = [stop];\n            }\n            else if (sum_distance == best_length) {\n                center_stops.push(stop);\n            }\n        }\n\n        return center_stops;\n    }\n\n    outer_stops() {\n        // This returns the set of stops connected by only one edge.\n\n        var outer_stops = [];\n        var inner_stops = [];\n\n        // If we don't have any stops, we don't have any outer stops.\n        if (this.stops.length === 0) {\n            return [];\n        }\n\n        // If we only have one stop, it's the only outer stop.\n        if (this.stops.length == 1) {\n            return [this.stops[0]];\n        }\n\n        // Otherwise, we should probably have at least one edge to work with.\n        for (var i = 0; i < this.edges.length; i++) {\n            var edge = this.edges[i];\n            for (var j = 0; j < edge.stops.length; j++) {\n                var stop = edge.stops[j];\n                var outer_stop_index = outer_stops.indexOf(stop);\n                var inner_stop_index = inner_stops.indexOf(stop);\n\n                if (inner_stop_index == -1 && outer_stop_index == -1) {\n                    // First time encountering this stop\n                    outer_stops.push(stop);\n                }\n                if (inner_stop_index == -1 && outer_stop_index > -1) {\n                    // Second time encountering this stop\n                    outer_stops.splice(outer_stop_index, 1);\n                    inner_stops.push(stop);\n                }\n            }\n        }\n        \n        // If we still have no outer stops (maybe a loop in the line) just give the first stop.\n        if (outer_stops.length === 0) return [this.stops[0]];\n\n        return outer_stops;\n    }\n    \n    path_between_stops(stop_1, stop_2) {\n        \n        var dfs_stops = [];\n        var dfs_path = [];\n        var dfs_path_found = false;\n        var visited = {};\n\n        var max_depth = 10;\n\n        // recursive DFS to find all the paths\n        function dfs(v, target, l) {\n            //console.log(\"DFS: node \"+v.station.name);\n\n            // Add new stop.\n            dfs_stops.push(v);\n            if (v == target) {\n                dfs_path_found = true;\n                dfs_path = dfs_stops;\n            }\n\n            visited[v.sid] = 1;\n            var neighbors = l.neighbors(v);\n            for (var i = 0; i < neighbors.length; i++) {\n                var w = neighbors[i];\n                if (!visited[w.sid] && !dfs_path_found) {\n                    dfs(w, target, l);\n                }\n            }\n            if (!dfs_path_found) {\n                var v_i = dfs_stops.indexOf(v);\n                dfs_stops.splice(v_i, 1);\n            }\n        }\n        \n        dfs(stop_1, stop_2, this);\n        return dfs_path_found;\n    }\n\n    overlapping_stops(stop) {\n        for (var i = 0; i < this.stops.length; i++) {\n            if (stop.station.sid == this.stops[i].station.sid) {\n                return this.stops[i];\n            }\n        }\n        return null;\n    }\n    \n    remove_self_edges() {\n        var edges_removed = [];\n        for (var l = 0; l < this.edges.length; l++) {\n            var edge = this.edges[l];\n            if (edge.stops[0].sid == edge.stops[1].sid) {\n                edges_removed.push(edge);\n                this.remove_edge(edge);\n            }\n        }\n        return edges_removed;\n    }\n    \n    remove_duplicate_edges() {\n        var edges_removed = [];\n        for (var i = 0; i < this.edges.length; i++) {\n            var edge = this.edges[i];\n            for (var j = 0; j < this.edges.length; j++) {\n                var edge_c = this.edges[j];\n                if (edge != edge_c && edge.compare_stops(edge_c.stops)) {\n                    if (edges_removed.indexOf(edge) == -1) edges_removed.push(edge);\n                }\n            }\n        }\n        for (i = 0; i < edges_removed.length; i++) {\n            this.remove_edge(edges_removed[i]);\n        }\n        return edges_removed;\n    }\n\n    toJSON() {\n        var stops_json = [];\n        for (var i = 0; i < this.stops.length; i++) {\n            //stops_json.push(this.stops[i].sid);\n            stops_json.push(this.stops[i]);\n        }\n        return {\"sid\": this.sid, \"name\": this.name, \"full_name\": this.full_name, \"color_bg\": this.color_bg, \"color_fg\": this.color_fg, \"group_id\": this.group_id, \"stops\": stops_json, \"edges\": this.edges};\n        //return JSON.stringify(this);\n    }\n\n    from_json(j, service) {\n        this.sid = j.sid;\n        this.name = j.name;\n        this.full_name = j.full_name;\n        this.color_bg = j.color_bg;\n        this.color_fg = j.color_fg;\n        this.stops = [];\n        for (var i = 0; i < j.stops.length; i++) {\n            var s = new Stop(service.get_station_by_id(j.stops[i].station_id));\n            s.sid = j.stops[i].sid;\n            s.from_json(j.stops[i], service);\n            this.add_stop(s);\n        }\n        this.edges = [];\n        for (i = 0; i < j.edges.length; i++) {\n            var e = new Edge([]);\n            e.sid = j.edges[i].sid;\n            e.from_json(j.edges[i], this);\n            this.add_edge(e);\n        }\n    }\n}\n\nclass Edge {\n    /*\n     * An Edge is a connection between two Stops.\n     *\n     * Attributes:\n     *  stops: An array (of size 2) containing the Stops connected by this Edge.\n     *  path: An EdgePath used to represent this edge.\n     */\n\n    constructor(stops, preview) {\n        if (preview === undefined || preview === false) {\n            this.sid = _id_factory.id();\n        } else {\n            this.sid = 0;\n        }\n        this.stops = stops;\n        this.path = null;\n    }\n\n    length() {\n        var location_0 = this.stops[0].station.location;\n        var location_1 = this.stops[1].station.location;\n        var latlng_0 = L.latLng(location_0[0], location_0[1]);\n        var latlng_1 = L.latLng(location_1[0], location_1[1]);\n\n        return latlng_0.distanceTo(latlng_1);\n    }\n\n    has_stop(stop) {\n        if (this.stops[0].sid == stop.sid || this.stops[1].sid == stop.sid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    has_station(station) {\n        if (this.stops[0].station.sid == station.sid || this.stops[1].station.sid == station.sid) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    compare_stops(s) {\n        if (s[0].sid == this.stops[0].sid && s[1].sid == this.stops[1].sid) return 1;\n        if (s[0].sid == this.stops[1].sid && s[1].sid == this.stops[0].sid) return 2;\n        return 0;\n    }\n\n    toJSON() {\n        return {\"sid\": this.sid, \"stop_ids\": [this.stops[0].sid, this.stops[1].sid]};\n    }\n\n    from_json(j, line) {\n        this.sid = j.sid;\n        this.stops = [];\n        for (var i = 0; i < j.stop_ids.length; i++) {\n            this.stops.push(line.get_stop_by_id(j.stop_ids[i]));\n        }\n    }\n}\n\nclass Transfer {\n    /*\n     * A Transfer represents an in-system connection between two Stations.\n     *\n     * Attributes:\n     *  stations: array of connected Stations\n     */\n    constructor(stations) {\n        this.sid = _id_factory.id();\n        this.stations = stations;\n    }\n    \n    has_station(station) {\n        if (this.stations.indexOf(station) > -1) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    toJSON() {\n        return {\"sid\": this.sid, \"station_ids\": [this.stations[0].sid, this.stations[1].sid]};\n    }\n\n    from_json(j, service) {\n        this.sid = j.sid;\n        this.stations = [];\n        for (var i = 0; i < j.station_ids.length; i++) {\n            this.stations.push(service.get_station_by_id(j.station_ids[i]));\n        }\n    }\n}\n\nclass Service {\n    /*\n     * A Service is a collection of Lines; most analogous to a single mode within a transit agency.\n     *\n     * Attributes:\n     *  name: A string representing the Service's name.\n     *  lines: An array of Lines within this Service.\n     */\n\n    constructor(name) {\n        this.sid = _id_factory.id();\n        this.name = name;\n        this.lines = [];\n        this.stations = [];\n        this.transfers = [];\n        this.mode = \"\";\n    }\n\n    add_line(l) {\n        this.lines.push(l);\n    }\n\n    get_line_by_id(id) {\n        for (var i = 0; i < this.lines.length; i++) {\n            if (this.lines[i].sid == id) {\n                return this.lines[i];\n            }\n        }\n        return null;\n    }\n\n    get_line_by_stop(stop) {\n        for (var i = 0; i < this.lines.length; i++) {\n            if (this.lines[i].has_stop(stop)) {\n                return this.lines[i];\n            }\n        }\n        return null;\n    }\n    \n    has_edge_for_stations(station_1, station_2) {\n        for (var i = 0; i < this.lines.length; i++) {\n            var stops_1 = this.lines[i].get_stops_by_station(station_1);\n            var stops_2 = this.lines[i].get_stops_by_station(station_2);\n            for (var j = 0; j < stops_1.length; j++) {\n                for (var k = 0; k < stops_2.length; k++) {\n                    var edge = this.lines[i].get_edge_by_stops([stops_1[j], stops_2[k]]);\n                    if (edge !== null) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    add_station(s) {\n        this.stations.push(s);\n    }\n\n    get_station_by_id(id) {\n        for (var i = 0; i < this.stations.length; i++) {\n            if (this.stations[i].sid == id) {\n                return this.stations[i];\n            }\n        }\n        return null;\n    }\n\n    station_lines(station) {\n        var lines = [];\n\n        for (var i = 0; i < this.lines.length; i++) {\n            var line = this.lines[i];\n            for (var j = 0; j < line.stops.length; j++) {\n                var stop = line.stops[j];\n                if (stop.station.sid == station.sid && lines.indexOf(line) == -1) {\n                    lines.push(line);\n                }\n            }\n        }\n        return lines;\n    }\n    \n    station_is_end_of_line(station) {\n        var station_lines = this.station_lines(station);\n        for (var j = 0; j < station_lines.length; j++) {\n            var station_line = station_lines[j];\n            var outer_stops = station_line.outer_stops();\n            for (var k = 0; k < outer_stops.length; k++) {\n                var outer_stop = outer_stops[k];\n                if (outer_stop.station == station) return true;\n            }\n        }\n        return false;\n    }\n    \n    choose_drawmap(drawmaps, l, visited) {\n        for (var k = 0; k < drawmaps.length; k++) {\n            var drawmap = drawmaps[k];\n            // Only want drawmaps on a different line.\n            if (drawmap.line != l) {\n                // We only want to add one drawmap.\n                // They should be sorted such that the shortest drawmap for each line is available first.\n                \n                // Check to make sure the inside of this drawmap doesn't pass through any stations we've already visited.\n                // Don't count the first or last stop.\n                var station_repeat = false;\n                for (var m = 1; m < drawmap.stops.length-1; m++) {\n                    var station = drawmap.stops[m].station;\n                    if (visited[station.sid]) station_repeat = true;\n                }\n                if (!station_repeat) {\n                    return drawmap;\n                }\n            }\n        }\n        return null;\n    }\n    \n    station_drawmap(line) {\n        var outer_stops = line.outer_stops();\n        var start_stop = outer_stops[0];\n        \n        var dfs_stops = [[]];\n        var dfs_branch = [];\n\n        var max_depth = 10;\n        \n        function visited_in_branch(v, branch) {\n            for (var j = 0; j < branch.length; j++) {\n                var s = branch[j];\n                if (v.station.sid == s.sid) return true;\n            }\n            return false;\n        }\n        \n        var visited = {};\n        var visited_edge_sids = [];\n\n        function dfs(v, sv, l, a) {\n            \n            //console.log(v.station.name);\n            visited[v.station.sid] = 1;\n            // Add new stop.\n            dfs_stops[dfs_stops.length-1].push(v.station);\n            a += 1;\n\n            var neighbors = line.neighbors(v);\n            var new_neighbor_count = 0;\n            \n            dfs_branch = dfs_stops[dfs_stops.length-1];\n            var last_in_branch = dfs_branch[dfs_branch.length-2];\n            var current_branch_length = dfs_branch.length;\n            \n            var branch_count = 0;\n            for (var i = 0; i < neighbors.length; i++) {\n                \n                var w = neighbors[i];\n                var e = line.get_edge_by_stops([v,w]);\n                if (visited_edge_sids.indexOf(e.sid) == -1) {\n                //if (!visited_in_branch(w, dfs_branch)) {\n                //if (!visited[w.station.sid]) {\n                    // Get the drawmaps for the current stop pair.\n                    visited_edge_sids.push(e.sid);\n                    \n                    if (new_neighbor_count > 0) {\n                        //console.log(\"second neighbor. branch_count=\"+branch_count.toString());\n                        // Expand the DFS arrays to start a new path.\n                        //console.log(\"current branch length: \"+current_branch_length.toString());\n                        dfs_stops.push(dfs_branch.slice(0, current_branch_length));\n                        branch_count = 0;\n                    }\n                    var drawmaps = sv.drawmaps(v, w, l);\n                    var target = dfs_stops[dfs_stops.length-1];\n                    var drawmap = sv.choose_drawmap(drawmaps, l, visited);\n                    if (drawmap !== null) {\n                        for (var j = 1; j < drawmap.stops.length - 1; j++) {\n                            target.push(drawmap.stops[j].station);\n                            a += 1;\n                        }\n                    }\n                    var ret = dfs(w, sv, l, branch_count);\n                    //console.log(\"ret: \"+ret.toString());\n                    a += ret;\n                    branch_count += ret;\n                    new_neighbor_count += 1;\n                    \n                }\n            }\n            return a;\n        }\n        \n        if (start_stop !== null) {\n            dfs(start_stop, this, line, 0);\n        }\n        \n        // Check for loops at the end of branches\n        for (var i = 0; i < dfs_stops.length; i++) {\n            var branch = dfs_stops[i];\n            var branch_stop_start = line.get_stops_by_station(branch[0])[0];\n            var branch_stop_end = line.get_stops_by_station(branch[branch.length-1])[0];\n            var edge = line.get_edge_by_stops([branch_stop_start, branch_stop_end]);\n            if (edge !== null && visited_edge_sids.indexOf(edge.sid) == -1) {\n                var drawmaps = this.drawmaps(branch_stop_end, branch_stop_start, line);\n                var br_visited = {};\n                for (var j = 0; j < branch.length; j++) {\n                    br_visited[branch[j].sid] = 1;\n                }\n                var drawmap = this.choose_drawmap(drawmaps, line, br_visited);\n                if (drawmap !== null) {\n                    for (j = 1; j < drawmap.stops.length; j++) {\n                        branch.push(drawmap.stops[j].station);\n                    }\n                } else {\n                    branch.push(branch_stop_start.station);\n                }\n            }\n        }\n        \n        return dfs_stops;\n    }\n\n    drawmaps(stop_1, stop_2, line) {\n        // For stop 1 and 2 connected by line,\n        // return an array of additional stops to draw the line through.\n\n        var dfs_stops = [[]];\n        var dfs_branch = [];\n        var visited = {};\n        var visited_edge_sids = [];\n\n        var max_depth = 10;\n\n        // TODO rewrite this\n        // add a target. Find all paths from start to finish\n        /*function dfs(v, o, t, sv, l, a) {\n            \n            //console.log(v.station.name);\n            visited[v.sid] = 1;\n            // Add new stop.\n            dfs_stops[dfs_stops.length-1].push(v);\n            a += 1;\n\n            var neighbors = l.neighbors(v);\n            var new_neighbor_count = 0;\n            \n            dfs_branch = dfs_stops[dfs_stops.length-1];\n            var last_in_branch = dfs_branch[dfs_branch.length-2];\n            var current_branch_length = dfs_branch.length;\n            \n            var branch_count = 0;\n            for (var i = 0; i < neighbors.length; i++) {\n                \n                var w = neighbors[i];\n                var e = l.get_edge_by_stops([v,w]);\n                if (visited_edge_sids.indexOf(e.sid) == -1) {\n                //if (!visited_in_branch(w, dfs_branch)) {\n                //if (!visited[w.station.sid]) {\n                    // Get the drawmaps for the current stop pair.\n                    visited_edge_sids.push(e.sid);\n                    \n                    if (w.sid == t.sid) {\n                        //console.log(\"second neighbor. branch_count=\"+branch_count.toString());\n                        // Expand the DFS arrays to start a new path.\n                        //console.log(\"current branch length: \"+current_branch_length.toString());\n                        dfs_stops.push(dfs_branch.slice(0, current_branch_length));\n                        branch_count = 0;\n                        w = o;\n                    }\n                    var ret = dfs(w, o, t, sv, l, branch_count);\n                    //console.log(\"ret: \"+ret.toString());\n                    a += ret;\n                    branch_count += ret;\n                    new_neighbor_count += 1;\n                    \n                }\n            }\n            return a;\n        }*/\n        function dfs(v, sv, l, a) {\n            \n            //console.log(v.station.name);\n            visited[v.sid] = 1;\n            // Add new stop.\n            dfs_stops[dfs_stops.length-1].push(v);\n            a += 1;\n\n            var neighbors = l.neighbors(v);\n            var new_neighbor_count = 0;\n            \n            dfs_branch = dfs_stops[dfs_stops.length-1];\n            var last_in_branch = dfs_branch[dfs_branch.length-2];\n            var current_branch_length = dfs_branch.length;\n            \n            var branch_count = 0;\n            for (var i = 0; i < neighbors.length; i++) {\n                \n                var w = neighbors[i];\n                var e = l.get_edge_by_stops([v,w]);\n                if (visited_edge_sids.indexOf(e.sid) == -1) {\n                //if (!visited_in_branch(w, dfs_branch)) {\n                //if (!visited[w.station.sid]) {\n                    // Get the drawmaps for the current stop pair.\n                    visited_edge_sids.push(e.sid);\n                    \n                    if (new_neighbor_count > 0) {\n                        //console.log(\"second neighbor. branch_count=\"+branch_count.toString());\n                        // Expand the DFS arrays to start a new path.\n                        //console.log(\"current branch length: \"+current_branch_length.toString());\n                        dfs_stops.push(dfs_branch.slice(0, current_branch_length));\n                        branch_count = 0;\n                    }\n                    var ret = dfs(w, sv, l, branch_count);\n                    //console.log(\"ret: \"+ret.toString());\n                    a += ret;\n                    branch_count += ret;\n                    new_neighbor_count += 1;\n                    \n                }\n            }\n            return a;\n        }\n\n        var lines_to_check = this.station_lines(stop_1.station);\n        var drawmaps = [new Drawmap(line, [stop_1, stop_2])];\n\n        for (var i = 0; i < lines_to_check.length; i++) {\n            var line_to_check = lines_to_check[i];\n            if (line_to_check.sid != line.sid) {\n                // Check if both stops are on this line.\n                var stop_1_overlap = line_to_check.overlapping_stops(stop_1);\n                var stop_2_overlap = line_to_check.overlapping_stops(stop_2);\n\n                if (stop_1_overlap !== null && stop_2_overlap !== null) {\n                    // Initialize visited stops.\n                    visited = {};\n                    var visited_stops_count = 0;\n                    for (var j = 0; j < line_to_check.stops.length; j++) {\n                        visited[line_to_check.stops[j].sid] = 0;\n                    }\n                    // Initialize DFS variables.\n                    dfs_stops = [[]];\n                    dfs_branch = [];\n                    visited_edge_sids = [];\n                    dfs(stop_1_overlap, this, line_to_check, 0);\n                    //dfs(stop_1_overlap, stop_1_overlap, stop_2_overlap, this, line_to_check, 0);\n                    for (j = 0; j < dfs_stops.length; j++) {\n                        var branch = dfs_stops[j];\n                        var stop_2_index = branch.indexOf(stop_2_overlap);\n                        if (stop_2_index != -1) {\n                            branch.length = stop_2_index+1;\n                            drawmaps.push(new Drawmap(line_to_check, branch));\n                        }\n                    }\n                }\n            }\n        }\n\n        var line_sid_to_shortest_drawmap_length = {};\n        for (i = 0; i < drawmaps.length; i++) {\n            var drawmap = drawmaps[i];\n            var sid = drawmap.line.sid;\n            if (!(sid in line_sid_to_shortest_drawmap_length)) {\n                line_sid_to_shortest_drawmap_length[sid] = drawmap.stops.length;\n            } else if (line_sid_to_shortest_drawmap_length[sid] > drawmap.stops.length) {\n                line_sid_to_shortest_drawmap_length[sid] = drawmap.stops.length;\n            }\n        }\n        // In-place sort by line\n        drawmaps.sort(function(a,b) {\n            if (a.line.sid != b.line.sid) {\n                return (line_sid_to_shortest_drawmap_length[a.line.sid] < line_sid_to_shortest_drawmap_length[b.line.sid]);\n                //return (line_sid_to_shortest_drawmap_length[a.line.sid] > line_sid_to_shortest_drawmap_length[b.line.sid]);\n            } else {\n                return (a.stops.length > b.stops.length);\n            }\n        });\n\n        return drawmaps;\n\n    }\n    \n    /**\n     * Add transfer between stations station_1 and station_2.\n     */\n    add_transfer(station_1, station_2) {\n        for (var i = this.transfers.length - 1; i >= 0; i--) {\n            var transfer = this.transfers[i];\n            if (transfer.has_station(station_1) && transfer.has_station(station_2)) {\n                this.transfers.splice(i, 1);\n            }\n        }\n        if (station_1 != station_2) {\n            this.transfers.push(new Transfer([station_1, station_2]));\n        }\n    }\n    \n    /**\n     * Remove all transfers that contain a station.\n     * Returns true if any transfers removed, else false.\n     */\n    remove_transfers_for_station(station) {\n        var num_removed = 0;\n        for (var i = this.transfers.length - 1; i >= 0; i--) {\n            var transfer = this.transfers[i];\n            if (transfer.has_station(station)) {\n                this.transfers.splice(i, 1);\n                num_removed += 1;\n            }\n        }\n        if ((num_removed) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    /**\n     * Removes all transfers longer than the input threshold.\n     * Returns true if any transfers removed, else false.\n     */\n    remove_transfers_above_length(length) {\n        var num_removed = 0;\n        for (var i = this.transfers.length - 1; i >= 0; i--) {\n            var transfer = this.transfers[i];\n            if (station_distance(transfer.stations[0], transfer.stations[1]) > length) {\n                this.transfers.splice(i, 1);\n                num_removed += 1;\n            }\n        }\n        if ((num_removed) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    to_json() {\n        return JSON.stringify(this);\n    }\n\n    from_json(j) {\n        this.sid = j.sid;\n        this.name = j.name;\n        this.mode = j.mode;\n        this.stations = [];\n        for (var i = 0; i < j.stations.length; i++) {\n            var s = new Station(j.stations[i].name, j.stations[i].location);\n            s.sid = j.stations[i].sid;\n            s.from_json(j.stations[i]);\n            this.add_station(s);\n        }\n        this.lines = [];\n        for (i = 0; i < j.lines.length; i++) {\n            var l = new Line(j.lines[i].name);\n            l.sid = j.lines[i].sid;\n            l.from_json(j.lines[i], this);\n            this.add_line(l);\n        }\n        this.transfers = [];\n        if (j.transfers !== null) {\n            for (i = 0; i < j.transfers.length; i++) {\n                var t = new Transfer([]);\n                t.from_json(j.transfers[i], this);\n                this.transfers.push(t);\n            }\n        }\n    }\n}\n\nclass Drawmap {\n    /*\n     * A Drawmap is a collection of Lines and Stops.\n     *\n     * Attributes:\n     *  line: The Line this drawmap follows.\n     *  stops: The Stops on this drawmap.\n     */\n\n    constructor(line, stops) {\n        this.line = line;\n        this.stops = stops;\n    }\n}\n\nclass IdFactory {\n    /*\n     * Generates unique object IDs.\n     */\n    constructor() {\n        this.current_id = 0;\n    }\n\n    id() {\n        var return_id = this.current_id;\n        this.current_id += 1;\n        return return_id;\n    }\n}\n","function get_url_parameter(param) {\n    var vars = {};\n    window.location.href.replace( location.hash, '' ).replace(\n            /[?&]+([^=&]+)=?([^&]*)?/gi, // regexp\n            function( m, key, value ) { // callback\n                    vars[key] = value !== undefined ? value : '';\n            }\n    );\n\n    if (param) {\n        return vars[param] ? vars[param].replace(/\\#$/, '') : null;\n    }\n    return vars;\n}\n\nfunction num_unique_colors(lines) {\n    var ret = 0;\n    var used_colors = [];\n    for (var i = 0; i < lines.length; i++) {\n        if (used_colors.indexOf(lines[i].color_bg) == -1) {\n            used_colors.push(lines[i].color_bg);\n            ret += 1;\n        }\n    }\n    return ret;\n}\n\nfunction station_distance(station_1, station_2) {\n    var s1 = {\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [station_1.location[1], station_1.location[0]]\n        }\n    };\n    var s2 = {\n        \"type\": \"Feature\",\n        \"properties\": {},\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [station_2.location[1], station_2.location[0]]\n        }\n    };\n\n    return turf.distance(s1, s2, \"miles\");\n}\n\nfunction is_latlng(s) {\n    return /^(\\-)?[0-9]{0,3}.[0-9]*,(\\ )?(\\-)?[0-9]{0,3}.[0-9]*$/.test(s);\n}\n\nfunction get_latlng(s) {\n    var c = s.split(\",\");\n    return [parseFloat(c[0]), parseFloat(c[1])];\n}\n\nfunction save_json() {\n    var json = session_json();\n    var blob = new Blob([json], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"enmodal.json\");\n}"]}